{"version":3,"sources":["webpack:///./src/shared.js"],"names":["range","addTitle","doc","title","cup","time","setFontSize","text","align","line","dictToArray","dict","type","temp_arr","Object","entries","arr","forEach","element","values","String","toLocaleString","length","i","parseInt","temp_placement","isNaN","temp_bnumber","temp_captain","temp_points","place","team","captain_1","captain_2","captain_3","points","b_number","captain","starting_place","locality","fish_name","fish_multiplier","fish_minsize","fish_weights","Math","round","Number","EPSILON","temp_fish","push","capitalize_words","str","replace","txt","toUpperCase","replaceAllChars","obj","map","each","o","join","replaceAll","string","search","split","formatDate","start_date","this","$moment","formatted_date","date","month","year","saveAsPDF","competition_type","table_id","rows","columns","pdf_competition_type","orientation","temp_start_date","competition","temp_end_date","end_date","jsPDF","name","start_time","end_time","cup_name","selected_normal","normal_points","table_fish_names","normal_weights","isTeamCompetition","$store","getters","getSignees","team_results","selected_biggest_fish","biggest_fishes_results","selected_biggest_amount","biggest_amounts_results","internal","pageSize","getWidth","autoTable","head","body","styles","overflow","cellWidth","rowPageBreak","halign","fontSize","lineColor","lineWidth","columnStyles","cellwidth","theme","pageBreak","tableWidth","startY","margin","top","fileName","openPdfOnNewTab","saveStatsAsPDF","resizeChartForPDF","fishesImg","document","getElementById","toDataURL","signeeImg","addImage","calculated_fish_weights","temp","calculated_total_weights","total_amount","previous","finalY","cup_points_multiplier","signees","getPointSignees","setChartsResponsive","saveAllAsPDF","tab","start_coord","current_tab","charts_loaded","temp_selected_biggest_fish","temp_selected_biggest_amount","temp_selected_normal","selected_print","includes","addPage","calculateBiggestFishes","calculateBiggestAmounts","counter","biggest_amounts","err","setTimeout","snackbar","Chart","require","id","instances","chart","canvas","parentNode","style","height","width","resize","start","end","getColor","placement","getMultiplierColor","multiplier","getColorPoints","initChartData","weights","fishNames","signeesWithPoints","totalSignees","temp_weights","colors","fish","color","fishes_chart_data","labels","datasets","label","backgroundColor","data","signee_chart_data","fishes_chart","signee_chart","sortDict","fishes","all_results","temp_results","fish_names","sort","a","b","weight","filter","result","boat_number","captain_name","HSVtoRGB","h","s","v","r","g","f","p","q","t","max","min","floor","getRandomColors","totalNumber","x","random","rgb","window","navigator","msSaveOrOpenBlob","output","open","URL","createObjectURL","revokeObjectURL","sortBy","field","isAscending","getMultiplierTextColor"],"mappings":"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","file":"js/about~12045fb6.4b97e782.js","sourcesContent":["import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nexport function addTitle(doc, title, cup, time) {\r\n  doc.setFontSize(24);\r\n  doc.text(10, 10, title, { align: \"left\" });\r\n  doc.setFontSize(14);\r\n  doc.text(10, 20, cup, { align: \"left\" });\r\n  doc.text(10, 30, time, { align: \"left\" });\r\n  doc.line(0, 35, 400, 35);\r\n}\r\n\r\n// Parses dictionary/json to array, for pdf autotables\r\nexport function dictToArray(dict, type) {\r\n  const temp_arr = Object.entries(dict);\r\n  const arr = [];\r\n  temp_arr.forEach((element) => {\r\n    let values = Object.values(element[1]);\r\n    // Normaalikilpailu, pisteet\r\n    if (type === 1) {\r\n      values[0] = String(values[0]) + \".\";\r\n      values[1] = \"(\" + String(values[1]) + \")\";\r\n      values[5] = values[5].toLocaleString() + \" p\";\r\n      values[6] = values[values.length - 1] + \" p\";\r\n    }\r\n    // Normaalikilpailu, kalat\r\n    if (type === 2) {\r\n      values[0] = String(values[0]) + \".\";\r\n      values[1] = \"(\" + String(values[1]) + \")\";\r\n      for (let i of range(3, values.length - 2)) {\r\n        if (parseInt(values[i]) > 0) {\r\n          values[i] = values[i].toLocaleString() + \" g\";\r\n        } else {\r\n          values[i] = \"-\";\r\n        }\r\n      }\r\n      values[values.length - 1] =\r\n        values[values.length - 1].toLocaleString() + \" p\";\r\n    }\r\n    // Suurimmat kalat, suurimmat kalasaaliit\r\n    if (type === 3) {\r\n      let temp_placement = isNaN(values[values.length - 1])\r\n        ? values[values.length - 2]\r\n        : values[values.length - 1];\r\n      let temp_bnumber = values[0];\r\n      let temp_captain = values[1];\r\n      let temp_points = values[2].toLocaleString() + \" g\";\r\n      values[0] = String(temp_placement) + \".\";\r\n      values[1] = \"(\" + String(temp_bnumber) + \")\";\r\n      values[2] = temp_captain;\r\n      values[3] = temp_points;\r\n    }\r\n    //Voittajat\r\n    if (type === 4) {\r\n      values[1] = \"(\" + String(values[1]) + \")\";\r\n      values[3] = values[values.length - 1].toLocaleString() + \" g\";\r\n    }\r\n    //Tiimikilpailu\r\n    if (type === 5) {\r\n      let place = values[5];\r\n      let team = values[0];\r\n      let captain_1 = values[1];\r\n      let captain_2 = values[2];\r\n      let captain_3 = values[3];\r\n      let points = values[4];\r\n      values[0] = String(place) + \".\";\r\n      values[1] = team;\r\n      values[2] = captain_1;\r\n      values[3] = captain_2;\r\n      values[4] = captain_3;\r\n      values[5] = points.toLocaleString() + \" p\";\r\n    }\r\n    //Normaalikilpailu, Ilmoittautuneet\r\n    if (type === 6) {\r\n      let b_number = values[1];\r\n      let captain = values[3];\r\n      let temp_captain = values[4];\r\n      let starting_place = values[2];\r\n      let locality = values[5];\r\n      let team = values[6];\r\n      values[0] = \"(\" + String(b_number) + \")\";\r\n      values[1] = captain;\r\n      values[2] = temp_captain;\r\n      values[3] = locality;\r\n      values[4] = starting_place;\r\n      values[5] = team;\r\n    }\r\n    //Kalalajien info\r\n    if (type === 7) {\r\n      let fish_name = values[1];\r\n      let fish_multiplier = values[2];\r\n      let fish_minsize = values[3];\r\n      let fish_weights = values[4];\r\n\r\n      if (isNaN(values[0])) {\r\n        fish_name = values[0];\r\n        fish_multiplier = values[1];\r\n        fish_minsize = values[2];\r\n        fish_weights = values[3];\r\n      }\r\n\r\n      values[0] = fish_name;\r\n      values[1] = \"x \" + String(fish_multiplier);\r\n      values[2] = fish_minsize + \" cm\";\r\n      values[3] =\r\n        String(Math.round((fish_weights / 1000 + Number.EPSILON) * 100) / 100) +\r\n        \" kg\";\r\n    }\r\n    // Suurimmat kalat, suurimmat kalasaaliit (Kaikki)\r\n    if (type === 8) {\r\n      let temp_placement = isNaN(values[values.length - 1])\r\n        ? values[values.length - 2]\r\n        : values[values.length - 1];\r\n      let temp_bnumber = values[0];\r\n      let temp_captain = values[1];\r\n      let temp_fish = isNaN(values[values.length - 1])\r\n        ? values[values.length - 1]\r\n        : values[values.length - 2];\r\n      let temp_points = values[2].toLocaleString() + \" g\";\r\n      values[0] = String(temp_placement) + \".\";\r\n      values[1] = \"(\" + String(temp_bnumber) + \")\";\r\n      values[2] = temp_captain;\r\n      values[3] = temp_fish;\r\n      values[4] = temp_points;\r\n    }\r\n    arr.push(values);\r\n  });\r\n  return arr;\r\n}\r\n\r\n// Capitalize all the words in given string. Takes account all the characters like \"-\", \"'\" etc.\r\nexport function capitalize_words(str) {\r\n  return str.replace(\r\n    /(?:^|\\s|['`‘’.-])[^\\x60^\\x7B-\\xDF](?!(\\s|$))/g,\r\n    function (txt) {\r\n      return txt.toUpperCase();\r\n    }\r\n  );\r\n}\r\n\r\nexport function replaceAllChars(text, obj) {\r\n  return [...text]\r\n    .map((each) => {\r\n      for (const o in obj) {\r\n        each == o ? (each = obj[o]) : o;\r\n      }\r\n      return each;\r\n    })\r\n    .join(\"\");\r\n}\r\n\r\n// For naming the pdf, replace certain characters\r\nexport function replaceAll(string, search, replace) {\r\n  return string.split(search).join(replace);\r\n}\r\n\r\n// Returns date in format dd/mm/yyyy as string\r\nexport function formatDate(start_date) {\r\n  start_date = this.$moment(start_date);\r\n  let formatted_date = `${start_date.date()}.${\r\n    start_date.month() + 1\r\n  }.${start_date.year()}`;\r\n\r\n  return formatted_date;\r\n}\r\n// Convert the charts and the tables to pdf\r\nexport function saveAsPDF(\r\n  competition_type,\r\n  table_id,\r\n  orientation = \"portrait\"\r\n) {\r\n  // Format dates for easier reding\r\n  let temp_start_date = this.formatDate(this.competition.start_date);\r\n  let temp_end_date = this.formatDate(this.competition.end_date);\r\n  let rows;\r\n  let columns;\r\n  let pdf_competition_type;\r\n  // PDF creation\r\n  let doc = new jsPDF({ orientation: orientation });\r\n  // Title\r\n  const title = `${this.competition.name}`;\r\n  const date =\r\n    temp_start_date === temp_end_date\r\n      ? String(temp_start_date)\r\n      : `${temp_start_date} - ${temp_end_date}`;\r\n  const time = `${date}, Klo. ${this.competition.start_time} - ${this.competition.end_time}`;\r\n  addTitle(doc, title, this.competition.cup_name, time);\r\n  doc.setFontSize(20);\r\n\r\n  if (table_id === \"#normal-table\") {\r\n    pdf_competition_type = `Normaalikilpailu${this.selected_normal}`;\r\n    // Other tables are generated in code so no need to wait for rendering to html\r\n    if (this.selected_normal === \"Pisteet\") {\r\n      columns = [\r\n        \"Sijoitus\",\r\n        \"Nro.\",\r\n        \"Kippari\",\r\n        \"Varakippari\",\r\n        \"Paikkakunta\",\r\n        \"Tulos\",\r\n        \"Cup pisteet\",\r\n      ];\r\n      // Format dictionary/json to format that autotable understands (arrays in arrays);\r\n      rows = this.dictToArray(this.normal_points, 1);\r\n    }\r\n    if (this.selected_normal === \"Kalat\") {\r\n      columns = [\"Sijoitus\", \"Nro.\", \"Kippari\"];\r\n      // Get fish names for columns\r\n      this.table_fish_names.forEach((name) => {\r\n        columns.push(name);\r\n      });\r\n      columns.push(\"Tulos\");\r\n      // Format dictionary/json to format that autotable understands (arrays in arrays);\r\n      rows = this.dictToArray(this.normal_weights, 2);\r\n    }\r\n    if (this.selected_normal === \"Ilmoittautuneet\") {\r\n      columns = [\r\n        \"Kilp. numero\",\r\n        \"Kippari\",\r\n        \"Varakippari\",\r\n        \"Paikkakunta\",\r\n        \"Lähtöpaikka\",\r\n      ];\r\n      if (this.isTeamCompetition) {\r\n        columns.push(\"Tiimi\");\r\n      }\r\n      // Format dictionary/json to format that autotable understands (arrays in arrays);\r\n      rows = this.dictToArray(this.$store.getters.getSignees, 6);\r\n    }\r\n  }\r\n\r\n  if (table_id === \"#team-table\") {\r\n    pdf_competition_type = `Tiimikilpailu`;\r\n    // Other tables are generated in code so no need to wait for rendering to html\r\n    columns = [\"Sijoitus\", \"Tiimi\", \"Jäsen 1\", \"Jäsen 2\", \"Jäsen 3\", \"Pisteet\"];\r\n    // Format dictionary/json to format that autotable understands (arrays in arrays);\r\n    rows = this.dictToArray(this.team_results, 5);\r\n  }\r\n\r\n  if (table_id === \"#biggest-fishes-table\") {\r\n    pdf_competition_type = `SuurimmatKalat${this.selected_biggest_fish}`;\r\n\r\n    if (this.selected_biggest_fish === \"Voittajat\") {\r\n      columns = [\"Kalalaji\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n      rows = this.dictToArray(this.biggest_fishes_results, 4);\r\n    } else if (this.selected_biggest_fish === \"Kaikki\") {\r\n      columns = [\"Sijoitus\", \"Veneen nro\", \"Kippari\", \"Kala\", \"Paino\"];\r\n      rows = this.dictToArray(this.biggest_fishes_results, 8);\r\n    } else {\r\n      columns = [\"Sijoitus\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n      rows = this.dictToArray(this.biggest_fishes_results, 3);\r\n    }\r\n  }\r\n\r\n  if (table_id === \"#biggest-amounts-table\") {\r\n    pdf_competition_type = `SuurimmatSaaliit${this.selected_biggest_amount}`;\r\n\r\n    if (this.selected_biggest_amount === \"Voittajat\") {\r\n      columns = [\"Kalalaji\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n      rows = this.dictToArray(this.biggest_amounts_results, 4);\r\n    } else if (this.selected_biggest_amount === \"Kaikki\") {\r\n      columns = [\"Sijoitus\", \"Veneen nro\", \"Kippari\", \"Kala\", \"Paino\"];\r\n      rows = this.dictToArray(this.biggest_amounts_results, 8);\r\n    } else {\r\n      columns = [\"Sijoitus\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n      rows = this.dictToArray(this.biggest_amounts_results, 3);\r\n    }\r\n  }\r\n\r\n  // Table, based on given table_id, and table title based on competition_type\r\n  //doc.text(100, 50, competition_type, { align: \"left\" });\r\n  doc.text(competition_type, doc.internal.pageSize.getWidth() / 2, 50, {\r\n    align: \"center\",\r\n  });\r\n  doc.autoTable({\r\n    head: [columns],\r\n    body: rows,\r\n    styles: {\r\n      overflow: \"linebreak\",\r\n      cellWidth: \"wrap\",\r\n      rowPageBreak: \"avoid\",\r\n      halign: \"justify\",\r\n      fontSize: \"8\",\r\n      lineColor: 100,\r\n      lineWidth: 0.25,\r\n    },\r\n    columnStyles: { text: { cellwidth: \"auto\" } },\r\n    theme: \"striped\",\r\n    pageBreak: \"auto\",\r\n    tableWidth: \"auto\",\r\n    startY: 55,\r\n    margin: { top: 20 },\r\n  });\r\n  // Save the pdf\r\n  const fileName = `${this.$moment(\r\n    this.competition.start_date\r\n  ).year()}_${this.replaceAll(\r\n    this.competition.name,\r\n    \" \",\r\n    \"\"\r\n  )}_${pdf_competition_type}.pdf`;\r\n  openPdfOnNewTab(doc, fileName);\r\n  // Set charts to be responsive again\r\n}\r\n\r\nexport function saveStatsAsPDF(competition_type, orientation = \"portrait\") {\r\n  resizeChartForPDF();\r\n  // Format dates for easier reding\r\n  let temp_start_date = this.formatDate(this.competition.start_date);\r\n  let temp_end_date = this.formatDate(this.competition.end_date);\r\n\r\n  let doc = new jsPDF({ orientation: orientation });\r\n\r\n  // Title\r\n  const title = `${this.competition.name}`;\r\n  const date =\r\n    temp_start_date === temp_end_date\r\n      ? String(temp_start_date)\r\n      : `${temp_start_date} - ${temp_end_date}`;\r\n  const time = `${date}, Klo. ${this.competition.start_time} - ${this.competition.end_time}`;\r\n  addTitle(doc, title, this.competition.cup_name, time);\r\n  doc.setFontSize(18);\r\n\r\n  // \"Tilastot\"\r\n  // Resize charts to be better looking on a pdf\r\n  var fishesImg = document\r\n    .getElementById(\"fishes_chart\")\r\n    .toDataURL(\"image/png\", 1.0);\r\n  var signeeImg = document\r\n    .getElementById(\"signee_chart\")\r\n    .toDataURL(\"image/png\", 1.0);\r\n\r\n  if (orientation === \"landscape\") {\r\n    doc.addImage(fishesImg, \"PNG\", 0, 40, 180, 90);\r\n    doc.addImage(signeeImg, \"PNG\", 140, 40, 180, 90);\r\n  } else {\r\n    doc.addImage(fishesImg, \"PNG\", -5, 40, 160, 80);\r\n    doc.addImage(signeeImg, \"PNG\", 90, 60, 160, 80);\r\n  }\r\n\r\n  doc.text(\r\n    \"Kalalajien määritykset\",\r\n    doc.internal.pageSize.getWidth() / 2,\r\n    145,\r\n    { align: \"center\" }\r\n  );\r\n  // Generate table\r\n  let rows = this.dictToArray(this.calculated_fish_weights, 7);\r\n  let temp =\r\n    Math.round((this.calculated_total_weights / 1000 + Number.EPSILON) * 100) /\r\n    100;\r\n  let total_amount = temp.toLocaleString() + \" kg\";\r\n  rows.push([\"Yhteensä\", \"\", \"\", total_amount]);\r\n  let columns = [\"Kalalaji\", \"Kerroin\", \"Alamitta\", \"Saalista saatu\"];\r\n  doc.autoTable({\r\n    head: [columns],\r\n    body: rows,\r\n    styles: {\r\n      overflow: \"linebreak\",\r\n      cellWidth: \"wrap\",\r\n      rowPageBreak: \"avoid\",\r\n      halign: \"justify\",\r\n      fontSize: \"8\",\r\n      lineColor: 100,\r\n      lineWidth: 0.25,\r\n    },\r\n    columnStyles: { cellwidth: \"auto\" },\r\n    theme: \"striped\",\r\n    pageBreak: \"auto\",\r\n    tableWidth: \"auto\",\r\n    startY: 150,\r\n    margin: { top: 20 },\r\n  });\r\n\r\n  doc.text(\r\n    \"Yleisiä tilastoja\",\r\n    doc.internal.pageSize.getWidth() / 2,\r\n    doc.autoTable.previous.finalY + 20,\r\n    {\r\n      align: \"center\",\r\n    }\r\n  );\r\n\r\n  columns = [\"\", \"\"];\r\n  rows = [\r\n    [\"Cup pistekerroin\", `x ${this.competition.cup_points_multiplier}`],\r\n    [\"Ilmoittautuneita yhteensä\", `${this.signees.length} kpl`],\r\n    [\r\n      \"Saalista saaneita\",\r\n      `${\r\n        Math.round(\r\n          (this.$store.getters.getPointSignees.length /\r\n            this.competition.signees.length) *\r\n            100 *\r\n            100\r\n        ) / 100\r\n      } % (${this.$store.getters.getPointSignees.length}/${\r\n        this.signees.length\r\n      })`,\r\n    ],\r\n  ];\r\n  doc.autoTable({\r\n    head: [columns],\r\n    body: rows,\r\n    styles: {\r\n      overflow: \"linebreak\",\r\n      cellWidth: \"wrap\",\r\n      rowPageBreak: \"avoid\",\r\n      halign: \"justify\",\r\n      fontSize: \"8\",\r\n      lineColor: 100,\r\n      lineWidth: 0.25,\r\n    },\r\n    columnStyles: { text: { cellwidth: \"auto\" } },\r\n    theme: \"striped\",\r\n    pageBreak: \"auto\",\r\n    tableWidth: \"auto\",\r\n    margin: { top: 20 },\r\n    startY: doc.autoTable.previous.finalY + 25,\r\n  });\r\n\r\n  // Save the pdf\r\n  const fileName = `${this.$moment(\r\n    this.competition.start_date\r\n  ).year()}_${this.replaceAll(\r\n    this.competition.name,\r\n    \" \",\r\n    \"\"\r\n  )}_${this.replaceAll(this.capitalize_words(competition_type), \" \", \"\")}.pdf`;\r\n  openPdfOnNewTab(doc, fileName);\r\n  // Set charts to be responsive again\r\n  setChartsResponsive();\r\n}\r\n// Saves all the chosen tables to pdf\r\nexport function saveAllAsPDF(tab, orientation = \"portrait\") {\r\n  let current_tab = tab;\r\n  let charts_loaded = true;\r\n  let temp_selected_biggest_fish = this.selected_biggest_fish;\r\n  let temp_selected_biggest_amount = this.selected_biggest_amount;\r\n  let temp_selected_normal = this.selected_normal;\r\n  // Format dates for easier reding\r\n  let temp_start_date = this.formatDate(this.competition.start_date);\r\n  let temp_end_date = this.formatDate(this.competition.end_date);\r\n  let year = this.$moment(this.competition.start_date).year();\r\n\r\n  let doc = new jsPDF({ orientation: orientation });\r\n\r\n  // Title\r\n  const title = `${this.competition.name}`;\r\n  const date =\r\n    temp_start_date === temp_end_date\r\n      ? String(temp_start_date)\r\n      : `${temp_start_date} - ${temp_end_date}`;\r\n  const time = `${date}, Klo. ${this.competition.start_time} - ${this.competition.end_time}`;\r\n  addTitle(doc, title, this.competition.cup_name, time);\r\n  doc.setFontSize(18);\r\n  // start_coord needed to keep track of y coordinates for tables (if there are no results -> no table drawn to pdf -> varying coordinates)\r\n  let start_coord;\r\n  let rows;\r\n  let columns;\r\n  //Normaalikilpailu (Pisteet), saved to pdf if it's inclued in this.selected_print array\r\n  if (this.selected_print.includes(\"normal\")) {\r\n    //Normaalikilpailu (Kalat)\r\n    columns = [\"Sijoitus\", \"Nro.\", \"Kippari\"];\r\n    // Get fish names for columns\r\n    this.table_fish_names.forEach((name) => {\r\n      columns.push(name);\r\n    });\r\n    columns.push(\"Tulos\");\r\n    rows = this.dictToArray(this.normal_weights, 2);\r\n    doc.text(\r\n      \"Normaalikilpailun tulokset (Kalat)\",\r\n      doc.internal.pageSize.getWidth() / 2,\r\n      50,\r\n      {\r\n        align: \"center\",\r\n      }\r\n    );\r\n    // Table generated in code\r\n    doc.autoTable({\r\n      head: [columns],\r\n      body: rows,\r\n      styles: {\r\n        overflow: \"linebreak\",\r\n        cellWidth: \"wrap\",\r\n        rowPageBreak: \"avoid\",\r\n        halign: \"justify\",\r\n        fontSize: \"8\",\r\n        lineColor: 100,\r\n        lineWidth: 0.25,\r\n      },\r\n      columnStyles: { text: { cellwidth: \"auto\" } },\r\n      theme: \"striped\",\r\n      pageBreak: \"auto\",\r\n      tableWidth: \"auto\",\r\n      margin: { top: 20 },\r\n      startY: 60,\r\n    });\r\n\r\n    // Other tables are generated in code so no need to wait for rendering to html\r\n    doc.addPage();\r\n    addTitle(doc, title, this.competition.cup_name, time);\r\n    doc.setFontSize(18);\r\n    columns = [\r\n      \"Sijoitus\",\r\n      \"Nro.\",\r\n      \"Kippari\",\r\n      \"Varakippari\",\r\n      \"Paikkakunta\",\r\n      \"Tulos\",\r\n      \"Cup pisteet\",\r\n    ];\r\n    // Format dictionary/json to format that autotable understands (arrays in arrays);\r\n    rows = this.dictToArray(this.normal_points, 1);\r\n    doc.text(\r\n      \"Normaalikilpailun tulokset (Pisteet)\",\r\n      doc.internal.pageSize.getWidth() / 2,\r\n      50,\r\n      {\r\n        align: \"center\",\r\n      }\r\n    );\r\n    // Table generated in code\r\n    doc.autoTable({\r\n      head: [columns],\r\n      body: rows,\r\n      styles: {\r\n        overflow: \"linebreak\",\r\n        cellWidth: \"wrap\",\r\n        rowPageBreak: \"avoid\",\r\n        halign: \"justify\",\r\n        fontSize: \"8\",\r\n        lineColor: 100,\r\n        lineWidth: 0.25,\r\n      },\r\n      columnStyles: { text: { cellwidth: \"auto\" } },\r\n      theme: \"striped\",\r\n      pageBreak: \"auto\",\r\n      tableWidth: \"auto\",\r\n      margin: { top: 20 },\r\n      startY: 60,\r\n    });\r\n  }\r\n\r\n  // Tiimikilpailu, drawn to pdf if it exists and , if it's inclued in this.selected_print array\r\n  if (this.isTeamCompetition && this.selected_print.includes(\"team\")) {\r\n    // If there is \"Normaalikilpailun tulokset\" selected also, start from new page\r\n    if (this.selected_print.includes(\"normal\")) {\r\n      doc.addPage();\r\n    }\r\n    addTitle(doc, title, this.competition.cup_name, time);\r\n    doc.setFontSize(18);\r\n    doc.text(100, 50, \"Tiimikilpailun tulokset\", { align: \"center\" });\r\n    // Add results, if there are any\r\n    if (this.team_results.length) {\r\n      // Other tables are generated in code so no need to wait for rendering to html\r\n      columns = [\r\n        \"Sijoitus\",\r\n        \"Tiimi\",\r\n        \"Jäsen 1\",\r\n        \"Jäsen 2\",\r\n        \"Jäsen 3\",\r\n        \"Pisteet\",\r\n      ];\r\n      // Format dictionary/json to format that autotable understands (arrays in arrays);\r\n      rows = this.dictToArray(this.normal_points, 1);\r\n      doc.autoTable({\r\n        head: [columns],\r\n        body: rows,\r\n        styles: {\r\n          overflow: \"linebreak\",\r\n          cellWidth: \"wrap\",\r\n          rowPageBreak: \"avoid\",\r\n          halign: \"justify\",\r\n          fontSize: \"8\",\r\n          lineColor: 100,\r\n          lineWidth: 0.25,\r\n        },\r\n        columnStyles: { text: { cellwidth: \"auto\" } },\r\n        theme: \"striped\",\r\n        pageBreak: \"auto\",\r\n        tableWidth: \"auto\",\r\n        margin: { top: 20 },\r\n        startY: 55,\r\n      });\r\n    }\r\n  }\r\n\r\n  // Suurimmat kalat/kalasaaliit (Kaikki) to pdf if it's inclued in this.selected_print array\r\n  if (this.selected_print.includes(\"all_biggest\")) {\r\n    // If there is content before, start from new page\r\n    if (\r\n      this.selected_print.includes(\"normal\") ||\r\n      this.selected_print.includes(\"team\")\r\n    ) {\r\n      doc.addPage();\r\n    }\r\n    // Suurimmat Kalat  (Kaikki)\r\n    // Select these for calculations\r\n    this.selected_biggest_fish = this.selected_biggest_amount = \"Kaikki\";\r\n    columns = [\"Sijoitus\", \"Veneen nro\", \"Kippari\", \"Kala\", \"Paino\"];\r\n    // Calculate data\r\n    this.calculateBiggestFishes();\r\n    this.calculateBiggestAmounts();\r\n    // If there are any results, add title\r\n    if (\r\n      this.biggest_fishes_results.length ||\r\n      this.biggest_amounts_results.length\r\n    ) {\r\n      addTitle(doc, title, this.competition.cup_name, time);\r\n      doc.setFontSize(18);\r\n    }\r\n\r\n    // If there are biggest fishes\r\n    if (this.biggest_fishes_results.length) {\r\n      rows = this.dictToArray(this.biggest_fishes_results, 8);\r\n      doc.text(\r\n        \"Suurimmat kalat\" + ` (${this.selected_biggest_fish})`,\r\n        doc.internal.pageSize.getWidth() / 2,\r\n        50,\r\n        { align: \"center\" }\r\n      );\r\n      // Table generated in code\r\n      doc.autoTable({\r\n        head: [columns],\r\n        body: rows,\r\n        styles: {\r\n          overflow: \"linebreak\",\r\n          cellWidth: \"wrap\",\r\n          rowPageBreak: \"avoid\",\r\n          halign: \"justify\",\r\n          fontSize: \"8\",\r\n          lineColor: 100,\r\n          lineWidth: 0.25,\r\n        },\r\n        columnStyles: { cellwidth: \"auto\" },\r\n        theme: \"striped\",\r\n        pageBreak: \"auto\",\r\n        tableWidth: \"auto\",\r\n        margin: { top: 20 },\r\n        startY: 55,\r\n      });\r\n      // Keep track of y coordinate\r\n      start_coord = doc.autoTable.previous.finalY + 25;\r\n    } else {\r\n      // If no biggest fishes, biggest amounts table starts from 50 instead\r\n      start_coord = 50;\r\n    }\r\n\r\n    //Suurimmat kalasaaliit (Kaikki)\r\n    // If there are any amounts --> if someone has gotten any fish\r\n    if (this.biggest_amounts_results.length) {\r\n      rows = this.dictToArray(this.biggest_amounts_results, 8);\r\n      doc.text(\r\n        \"Suurimmat kalasaaliit\" + ` (${this.selected_biggest_fish})`,\r\n        doc.internal.pageSize.getWidth() / 2,\r\n        start_coord,\r\n        { align: \"center\" }\r\n      );\r\n      // Table generated in code\r\n      doc.autoTable({\r\n        head: [columns],\r\n        body: rows,\r\n        styles: {\r\n          overflow: \"linebreak\",\r\n          cellWidth: \"wrap\",\r\n          rowPageBreak: \"avoid\",\r\n          halign: \"justify\",\r\n          fontSize: \"8\",\r\n          lineColor: 100,\r\n          lineWidth: 0.25,\r\n        },\r\n        columnStyles: { text: { cellwidth: \"auto\" } },\r\n        theme: \"striped\",\r\n        pageBreak: \"auto\",\r\n        tableWidth: \"auto\",\r\n        margin: { top: 20 },\r\n        startY: start_coord + 5,\r\n      });\r\n    }\r\n  }\r\n\r\n  //\"Suurimmat kalat\" to pdf if it's inclued in this.selected_print array\r\n  if (this.selected_print.includes(\"biggest_fishes\")) {\r\n    // If there is content before, start from new page\r\n    if (\r\n      this.selected_print.includes(\"normal\") ||\r\n      this.selected_print.includes(\"team\") ||\r\n      this.selected_print.includes(\"all_biggest\")\r\n    ) {\r\n      doc.addPage();\r\n    }\r\n    let counter = 0;\r\n    // For each fish, generate tables for \"Suurimmat Kalat (Kala)\" and \"Suurimmat Kalasaaliit (Kala)\"\r\n    this.table_fish_names.forEach((name) => {\r\n      // Same process as above, but for every fish instead of only winners\r\n      this.selected_biggest_fish = name;\r\n      this.calculateBiggestFishes();\r\n      start_coord = 10;\r\n\r\n      if (this.biggest_fishes_results.length) {\r\n        // So it doesn't add unnecessary page on the first loop\r\n        if (counter > 0) {\r\n          doc.addPage();\r\n        }\r\n        addTitle(doc, title, this.competition.cup_name, time);\r\n        doc.setFontSize(18);\r\n        start_coord = 50;\r\n\r\n        columns = [\"Sijoitus\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n        rows = this.dictToArray(this.biggest_fishes_results, 3);\r\n\r\n        doc.text(\r\n          \"Suurimmat kalat\" + ` (${name})`,\r\n          doc.internal.pageSize.getWidth() / 2,\r\n          start_coord,\r\n          {\r\n            align: \"center\",\r\n          }\r\n        );\r\n\r\n        doc.autoTable({\r\n          head: [columns],\r\n          body: rows,\r\n          styles: {\r\n            overflow: \"linebreak\",\r\n            cellWidth: \"wrap\",\r\n            rowPageBreak: \"avoid\",\r\n            halign: \"justify\",\r\n            fontSize: \"8\",\r\n            lineColor: 100,\r\n            lineWidth: 0.25,\r\n          },\r\n          columnStyles: { text: { cellwidth: \"auto\" } },\r\n          theme: \"striped\",\r\n          pageBreak: \"auto\",\r\n          tableWidth: \"auto\",\r\n          margin: { top: 20 },\r\n          startY: start_coord + 5,\r\n        });\r\n        counter++;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Suurimmat kalasaaliit to pdf if it's inclued in this.selected_print array\r\n  if (this.selected_print.includes(\"biggest_amounts\")) {\r\n    // If there is content before, start from new page\r\n    if (\r\n      this.selected_print.includes(\"normal\") ||\r\n      this.selected_print.includes(\"team\") ||\r\n      this.selected_print.includes(\"biggest_fishes\") ||\r\n      this.selected_print.includes(\"all_biggest\")\r\n    ) {\r\n      doc.addPage();\r\n    }\r\n    let counter = 0;\r\n    columns = [\"Sijoitus\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n    this.table_fish_names.forEach((name) => {\r\n      this.selected_biggest_amount = name;\r\n      this.calculateBiggestAmounts();\r\n      start_coord = 10;\r\n\r\n      if (this.biggest_amounts[name].length) {\r\n        // So it doesn't add unnecessary page on the first loop\r\n        if (counter > 0) {\r\n          doc.addPage();\r\n        }\r\n        addTitle(doc, title, this.competition.cup_name, time);\r\n        doc.setFontSize(18);\r\n        start_coord = 50;\r\n        columns = [\"Sijoitus\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n        rows = this.dictToArray(this.biggest_amounts[name], 3);\r\n        doc.text(\r\n          \"Suurimmat kalasaaliit\" + ` (${name})`,\r\n          doc.internal.pageSize.getWidth() / 2,\r\n          start_coord,\r\n          {\r\n            align: \"center\",\r\n          }\r\n        );\r\n\r\n        doc.autoTable({\r\n          head: [columns],\r\n          body: rows,\r\n          styles: {\r\n            overflow: \"linebreak\",\r\n            cellWidth: \"wrap\",\r\n            rowPageBreak: \"avoid\",\r\n            halign: \"justify\",\r\n            fontSize: \"8\",\r\n            lineColor: 100,\r\n            lineWidth: 0.25,\r\n          },\r\n          columnStyles: { text: { cellwidth: \"auto\" } },\r\n          theme: \"striped\",\r\n          pageBreak: \"auto\",\r\n          tableWidth: \"auto\",\r\n          startY: start_coord + 5,\r\n        });\r\n        counter++;\r\n      }\r\n    });\r\n  }\r\n\r\n  // \"Suurimmat Kalat (Voittajat) / Suurimmat kalasaaliit (Voittajat)\"\" to pdf if it's inclued in this.selected_print array\r\n  if (this.selected_print.includes(\"biggest_winners\")) {\r\n    // If there is content before, start from new page\r\n    if (\r\n      this.selected_print.includes(\"normal\") ||\r\n      this.selected_print.includes(\"team\") ||\r\n      this.selected_print.includes(\"biggest_fishes\") ||\r\n      this.selected_print.includes(\"biggest_amounts\") ||\r\n      this.selected_print.includes(\"all_biggest\")\r\n    ) {\r\n      doc.addPage();\r\n    }\r\n    // Suurimmat Kalat  (Voittajat)\r\n    // Select these for calculations\r\n    this.selected_biggest_fish = this.selected_biggest_amount = \"Voittajat\";\r\n    columns = [\"Kalalaji\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n    // Calculate data\r\n    this.calculateBiggestFishes();\r\n    this.calculateBiggestAmounts();\r\n    // If there are any results, add title\r\n    if (\r\n      this.biggest_fishes_results.length ||\r\n      this.biggest_amounts_results.length\r\n    ) {\r\n      addTitle(doc, title, this.competition.cup_name, time);\r\n      doc.setFontSize(18);\r\n    }\r\n\r\n    // If there are biggest fishes\r\n    if (this.biggest_fishes_results.length) {\r\n      rows = this.dictToArray(this.biggest_fishes_results, 4);\r\n      doc.text(\r\n        \"Suurimmat kalat\" + ` (${this.selected_biggest_fish})`,\r\n        doc.internal.pageSize.getWidth() / 2,\r\n        50,\r\n        { align: \"center\" }\r\n      );\r\n      // Table generated in code\r\n      doc.autoTable({\r\n        head: [columns],\r\n        body: rows,\r\n        styles: {\r\n          overflow: \"linebreak\",\r\n          cellWidth: \"wrap\",\r\n          rowPageBreak: \"avoid\",\r\n          halign: \"justify\",\r\n          fontSize: \"8\",\r\n          lineColor: 100,\r\n          lineWidth: 0.25,\r\n        },\r\n        columnStyles: { cellwidth: \"auto\" },\r\n        theme: \"striped\",\r\n        pageBreak: \"auto\",\r\n        tableWidth: \"auto\",\r\n        margin: { top: 20 },\r\n        startY: 55,\r\n      });\r\n      // Keep track of y coordinate\r\n      start_coord = doc.autoTable.previous.finalY + 25;\r\n    } else {\r\n      // If no biggest fishes, biggest amounts table starts from 50 instead\r\n      start_coord = 50;\r\n    }\r\n\r\n    //Suurimmat kalasaaliit (Voittajat)\r\n    // If there are any amounts --> if someone has gotten any fish\r\n    if (this.biggest_amounts_results.length) {\r\n      rows = this.dictToArray(this.biggest_amounts_results, 4);\r\n      doc.text(\r\n        \"Suurimmat kalasaaliit\" + ` (${this.selected_biggest_fish})`,\r\n        doc.internal.pageSize.getWidth() / 2,\r\n        start_coord,\r\n        { align: \"center\" }\r\n      );\r\n      // Table generated in code\r\n      doc.autoTable({\r\n        head: [columns],\r\n        body: rows,\r\n        styles: {\r\n          overflow: \"linebreak\",\r\n          cellWidth: \"wrap\",\r\n          rowPageBreak: \"avoid\",\r\n          halign: \"justify\",\r\n          fontSize: \"8\",\r\n          lineColor: 100,\r\n          lineWidth: 0.25,\r\n        },\r\n        columnStyles: { text: { cellwidth: \"auto\" } },\r\n        theme: \"striped\",\r\n        pageBreak: \"auto\",\r\n        tableWidth: \"auto\",\r\n        margin: { top: 20 },\r\n        startY: start_coord + 5,\r\n      });\r\n    }\r\n  }\r\n  // \"Tilastoja\" to pdf if it's inclued in this.selected_print array\r\n  if (this.selected_print.includes(\"stats\")) {\r\n    // If there is content before, start from new page\r\n    if (\r\n      this.selected_print.includes(\"normal\") ||\r\n      this.selected_print.includes(\"team\") ||\r\n      this.selected_print.includes(\"biggest_fishes\") ||\r\n      this.selected_print.includes(\"biggest_amounts\") ||\r\n      this.selected_print.includes(\"biggest_winners\")\r\n    ) {\r\n      doc.addPage();\r\n    }\r\n    resizeChartForPDF();\r\n    addTitle(doc, title, this.competition.cup_name, time);\r\n    doc.setFontSize(18);\r\n    // \"Tilastot\"\r\n    // Resize charts to be better looking on a pdf\r\n    var fishesImg = document\r\n      .getElementById(\"fishes_chart\")\r\n      .toDataURL(\"image/png\", 1.0);\r\n    var signeeImg = document\r\n      .getElementById(\"signee_chart\")\r\n      .toDataURL(\"image/png\", 1.0);\r\n    try {\r\n      if (orientation === \"landscape\") {\r\n        doc.addImage(fishesImg, \"PNG\", 0, 40, 180, 90);\r\n        doc.addImage(signeeImg, \"PNG\", 140, 40, 180, 90);\r\n      } else {\r\n        doc.addImage(fishesImg, \"PNG\", -5, 40, 160, 80);\r\n        doc.addImage(signeeImg, \"PNG\", 90, 60, 160, 80);\r\n      }\r\n    } catch (err) {\r\n      charts_loaded = false;\r\n      this.tab = \"stats\";\r\n      // Try again after 1 sec\r\n      setTimeout(() => this.saveAllAsPDF(current_tab), 1000);\r\n    }\r\n    doc.text(\r\n      \"Kalalajien määritykset\",\r\n      doc.internal.pageSize.getWidth() / 2,\r\n      165,\r\n      { align: \"center\" }\r\n    );\r\n    // Table generated straight from html\r\n    rows = this.dictToArray(this.calculated_fish_weights, 7);\r\n    let temp =\r\n      Math.round(\r\n        (this.calculated_total_weights / 1000 + Number.EPSILON) * 100\r\n      ) / 100;\r\n    let total_amount = temp.toLocaleString() + \" kg\";\r\n    rows.push([\"Yhteensä\", \"\", \"\", total_amount]);\r\n    columns = [\"Kalalaji\", \"Kerroin\", \"Alamitta\", \"Saalista saatu\"];\r\n\r\n    doc.autoTable({\r\n      head: [columns],\r\n      body: rows,\r\n      styles: {\r\n        overflow: \"linebreak\",\r\n        cellWidth: \"wrap\",\r\n        rowPageBreak: \"avoid\",\r\n        halign: \"justify\",\r\n        fontSize: \"8\",\r\n        lineColor: 100,\r\n        lineWidth: 0.25,\r\n      },\r\n      columnStyles: { text: { cellwidth: \"auto\" } },\r\n      theme: \"striped\",\r\n      pageBreak: \"auto\",\r\n      tableWidth: \"auto\",\r\n      startY: 170,\r\n      margin: { top: 20 },\r\n    });\r\n\r\n    doc.text(\r\n      \"Yleisiä tilastoja\",\r\n      doc.internal.pageSize.getWidth() / 2,\r\n      doc.autoTable.previous.finalY + 20,\r\n      {\r\n        align: \"center\",\r\n      }\r\n    );\r\n    // Generate table\r\n    columns = [\"\", \"\"];\r\n    rows = [\r\n      [\"Cup pistekerroin\", `x ${this.competition.cup_points_multiplier}`],\r\n      [\"Ilmoittautuneita yhteensä\", `${this.signees.length} kpl`],\r\n      [\r\n        \"Saalista saaneita\",\r\n        `${\r\n          Math.round(\r\n            (this.$store.getters.getPointSignees.length /\r\n              this.competition.signees.length) *\r\n              100 *\r\n              100\r\n          ) / 100\r\n        } % (${this.$store.getters.getPointSignees.length}/${\r\n          this.signees.length\r\n        })`,\r\n      ],\r\n    ];\r\n    doc.autoTable({\r\n      head: [columns],\r\n      body: rows,\r\n      styles: {\r\n        overflow: \"linebreak\",\r\n        cellWidth: \"wrap\",\r\n        rowPageBreak: \"avoid\",\r\n        halign: \"justify\",\r\n        fontSize: \"8\",\r\n        lineColor: 100,\r\n        lineWidth: 0.25,\r\n      },\r\n      columnStyles: { text: { cellwidth: \"auto\" } },\r\n      theme: \"striped\",\r\n      pageBreak: \"auto\",\r\n      tableWidth: \"auto\",\r\n      margin: { top: 20 },\r\n      startY: doc.autoTable.previous.finalY + 25,\r\n    });\r\n    // Set charts to be responsive again\r\n    setChartsResponsive();\r\n  }\r\n\r\n  // Reset variables\r\n  this.selected_biggest_fish = temp_selected_biggest_fish;\r\n  this.selected_biggest_amount = temp_selected_biggest_amount;\r\n  this.selected_normal = temp_selected_normal;\r\n  this.calculateBiggestFishes();\r\n  this.calculateBiggestAmounts();\r\n  initChartData;\r\n\r\n  // Save to pdf\r\n  if (charts_loaded) {\r\n    this.tab = current_tab;\r\n    const fileName = `${year}_${this.replaceAll(\r\n      this.competition.name,\r\n      \" \",\r\n      \"\"\r\n    )}Tulokset.pdf`;\r\n    openPdfOnNewTab(doc, fileName);\r\n  } else {\r\n    this.text = \"Kaaviot ei ruudulla, yritetään uudelleen...\";\r\n    this.snackbar = true;\r\n  }\r\n}\r\n\r\nexport function resizeChartForPDF() {\r\n  const Chart = require(\"chart.js\");\r\n  for (var id in Chart.instances) {\r\n    let chart = Chart.instances[id];\r\n    // Resize charts to fit pdf nicely\r\n    chart.canvas.parentNode.style.height = \"400px\";\r\n    chart.canvas.parentNode.style.width = \"800px\";\r\n    chart.resize();\r\n  }\r\n}\r\n\r\nexport function setChartsResponsive() {\r\n  const Chart = require(\"chart.js\");\r\n  for (var id in Chart.instances) {\r\n    let chart = Chart.instances[id];\r\n    // Resize charts back to original width\r\n    chart.canvas.parentNode.style.height = \"\";\r\n    chart.canvas.parentNode.style.width = \"\";\r\n    chart.resize();\r\n  }\r\n}\r\n\r\n// Custom range function for for loop, with recursion which is more efficient\r\nexport function* range(start, end) {\r\n  yield start;\r\n  if (start === end) return;\r\n  yield* range(start + 1, end);\r\n}\r\n\r\nexport function getColor(placement) {\r\n  if (placement === 1) return \"yellow\";\r\n  else if (placement > 1 && placement <= 10) return \"green\";\r\n  else return \"orange\";\r\n}\r\n\r\nexport function getMultiplierColor(multiplier) {\r\n  if (multiplier > 1) return \"red\";\r\n  if (multiplier === 1) return \"green\";\r\n  else return \"grey\";\r\n}\r\n\r\nexport function getColorPoints(points) {\r\n  if (points > 5) return \"primary darken-2\";\r\n  else return \"red\";\r\n}\r\n\r\n// Parse data, define charts, draw them\r\nexport function initChartData(\r\n  weights,\r\n  fishNames,\r\n  signeesWithPoints,\r\n  totalSignees\r\n) {\r\n  let temp_weights = [];\r\n  let colors = [];\r\n\r\n  // Get fish weights, and color from array for fishesChart\r\n  weights.forEach((fish) => {\r\n    temp_weights.push(fish.weights);\r\n    colors.push(fish.color);\r\n  });\r\n\r\n  const fishes_chart_data = {\r\n    labels: fishNames,\r\n    datasets: [\r\n      {\r\n        label: \"Paino\",\r\n        backgroundColor: colors,\r\n        data: temp_weights, // Weights\r\n      },\r\n    ],\r\n  };\r\n\r\n  const signee_chart_data = {\r\n    labels: [\"Kyllä\", \"Ei saalista\"],\r\n    datasets: [\r\n      {\r\n        label: \"Lukumäärä\",\r\n        backgroundColor: [\"#7fbf7f\", \"#ff7f7f\"],\r\n        data: [signeesWithPoints, totalSignees - signeesWithPoints], // Data\r\n      },\r\n    ],\r\n  };\r\n\r\n  return {\r\n    fishes_chart: { title: \"Kaloja saatu yhteensä\", data: fishes_chart_data },\r\n    signee_chart: { title: \"Saalista saaneita\", data: signee_chart_data },\r\n  };\r\n}\r\n\r\n// Sorts the dictionary based on weights\r\nexport function sortDict(fishes) {\r\n  if (fishes) {\r\n    let all_results = [];\r\n    let temp_results = [];\r\n    this.fish_names.forEach((name) => {\r\n      // If fish name is not \"Voittajat\"\r\n      if (name !== \"Voittajat\") {\r\n        // For every fish name, sort the array\r\n        if (fishes[name]) {\r\n          temp_results = fishes[name].sort(function compare(a, b) {\r\n            return parseInt(b.weight) - parseInt(a.weight);\r\n          });\r\n          fishes[name] = temp_results.filter((result) => result.weight > 0);\r\n          // Now it's sorted so first element is fine for \"voittajat\" table\r\n          if (fishes[name].length) {\r\n            all_results.push({\r\n              name: name,\r\n              boat_number: temp_results[0].boat_number,\r\n              captain_name: temp_results[0].captain_name,\r\n              weight: temp_results[0].weight.toLocaleString(),\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fishes, all_results;\r\n  } else {\r\n    return {}, [];\r\n  }\r\n}\r\n\r\n/**\r\n * HSV to RGB color conversion\r\n *\r\n * H runs from 0 to 360 degrees\r\n * S and V run from 0 to 100\r\n *\r\n * Ported from the excellent java algorithm by Eugene Vishnevsky at:\r\n * http://www.cs.rit.edu/~ncs/color/t_convert.html\r\n */\r\nexport function HSVtoRGB(h, s, v) {\r\n  var r, g, b;\r\n  var i;\r\n  var f, p, q, t;\r\n\r\n  // Make sure our arguments stay in-range\r\n  h = Math.max(0, Math.min(360, h));\r\n  s = Math.max(0, Math.min(100, s));\r\n  v = Math.max(0, Math.min(100, v));\r\n\r\n  s /= 100;\r\n  v /= 100;\r\n\r\n  if (s == 0) {\r\n    // Achromatic (grey)\r\n    r = g = b = v;\r\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n  }\r\n  h /= 60; // sector 0 to 5\r\n  i = Math.floor(h);\r\n  f = h - i; // factorial part of h\r\n  p = v * (1 - s);\r\n  q = v * (1 - s * f);\r\n  t = v * (1 - s * (1 - f));\r\n\r\n  switch (i) {\r\n    case 0:\r\n      r = v;\r\n      g = t;\r\n      b = p;\r\n      break;\r\n\r\n    case 1:\r\n      r = q;\r\n      g = v;\r\n      b = p;\r\n      break;\r\n\r\n    case 2:\r\n      r = p;\r\n      g = v;\r\n      b = t;\r\n      break;\r\n\r\n    case 3:\r\n      r = p;\r\n      g = q;\r\n      b = v;\r\n      break;\r\n\r\n    case 4:\r\n      r = t;\r\n      g = p;\r\n      b = v;\r\n      break;\r\n\r\n    default:\r\n      // case 5:\r\n      r = v;\r\n      g = p;\r\n      b = q;\r\n  }\r\n\r\n  return {\r\n    r: Math.round(r * 255),\r\n    g: Math.round(g * 255),\r\n    b: Math.round(b * 255),\r\n  };\r\n}\r\n\r\nexport function getRandomColors(totalNumber) {\r\n  var i = 360 / (totalNumber - 1); // distribute the colors evenly on the hue range\r\n  var colors = []; // hold the generated colors\r\n  const max = 90;\r\n  const min = 50;\r\n  for (var x = 0; x < totalNumber; x++) {\r\n    let s = Math.floor(Math.random() * (max - min)) + min;\r\n    let v = Math.floor(Math.random() * (max - min)) + min;\r\n    const rgb = this.HSVtoRGB(i * x, s, v);\r\n    colors.push(`rgb(${rgb.r},${rgb.g},${rgb.b})`); // you can also alternate the saturation and value for even more contrast between the colors\r\n  }\r\n  return colors;\r\n}\r\n\r\nexport function openPdfOnNewTab(doc, fileName) {\r\n  // https://stackoverflow.com/questions/17739816/how-to-open-generated-pdf-using-jspdf-in-new-window\r\n  // Save the pdf\r\n  // IE doesn't allow using a blob object directly as link href\r\n  // instead it is necessary to use msSaveOrOpenBlob\r\n  if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n    window.navigator.msSaveOrOpenBlob(doc.output(\"blob\"), fileName);\r\n  } else {\r\n    // For other browsers:\r\n    window.open(\r\n      URL.createObjectURL(doc.output(\"blob\")),\r\n      \"_blank\",\r\n      \"height=auto,width=auto,scrollbars=yes,location=yes\"\r\n    );\r\n\r\n    // For Firefox it is necessary to delay revoking the ObjectURL\r\n    setTimeout(() => {\r\n      window.URL.revokeObjectURL(doc.output(\"bloburl\"));\r\n    }, 100);\r\n  }\r\n}\r\n\r\nexport function sortBy(field, isAscending) {\r\n  return function (a, b) {\r\n    if (isAscending) {\r\n      return (b[field] < a[field]) - (b[field] > a[field]);\r\n    } else {\r\n      return (b[field] > a[field]) - (b[field] < a[field]);\r\n    }\r\n  };\r\n}\r\n\r\nexport function getMultiplierTextColor(multiplier) {\r\n  if (multiplier === 1) return \"green\";\r\n  else if (multiplier > 1 && multiplier < 25) return \"orange\";\r\n  else return \"red\";\r\n}\r\n\r\nexport default {\r\n  setChartsResponsive,\r\n  resizeChartForPDF,\r\n  saveAllAsPDF,\r\n  saveStatsAsPDF,\r\n  saveAsPDF,\r\n  dictToArray,\r\n  capitalize_words,\r\n  replaceAll,\r\n  formatDate,\r\n  range,\r\n  getMultiplierColor,\r\n  getMultiplierTextColor,\r\n  getColorPoints,\r\n  getColor,\r\n  initChartData,\r\n  sortDict,\r\n  HSVtoRGB,\r\n  getRandomColors,\r\n  openPdfOnNewTab,\r\n  sortBy,\r\n  replaceAllChars,\r\n};\r\n"],"sourceRoot":""}