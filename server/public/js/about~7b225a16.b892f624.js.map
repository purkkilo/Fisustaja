{"version":3,"sources":["webpack:///./src/CupService.js","webpack:///./src/CompetitionService.js","webpack:///./src/FeedbackService.js"],"names":["url","CupService","query","axios","get","params","res","cup","data","constructor","Array","dataToCup","post","user_id","name","year","signees","isPublic","id","put","newvalues","delete","map","_id","createdAt","Date","CompetitionService","competition","dataToCompetition","cup_id","locality","cup_name","cup_placement_points","cup_placement_points_array","cup_participation_points","cup_points_multiplier","start_date","end_date","start_time","end_time","fishes","state","teams","normal_points","normal_weights","team_results","team_competition","biggest_fishes","biggest_amounts","isFinished","total_weights","FeedbackService","feedback","type","message"],"mappings":"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","file":"js/about~7b225a16.b892f624.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst url = \"api/cups/\";\r\n\r\nclass CupService {\r\n  // Get cup(s) with given query\r\n  static async getCups(query) {\r\n    const res = await axios.get(`${url}`, { params: query });\r\n    try {\r\n      let cup = res.data;\r\n      if (typeof cup == \"object\" && cup.constructor === Array) {\r\n        cup = dataToCup(cup);\r\n      }\r\n      return cup;\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n\r\n  // Create cup\r\n  static insertCup(cup) {\r\n    return axios.post(url, {\r\n      user_id: cup.user_id,\r\n      name: cup.name,\r\n      year: cup.year,\r\n      signees: [],\r\n      isPublic: false,\r\n    });\r\n  }\r\n\r\n  // Update whole cup\r\n  static updateCup(id, cup) {\r\n    return axios.put(`${url}${id}`, cup);\r\n  }\r\n\r\n  // Update some values\r\n  static updateValues(id, newvalues) {\r\n    return axios.put(`${url}${id}`, newvalues);\r\n  }\r\n\r\n  static deleteCup(id) {\r\n    return axios.delete(`${url}${id}`);\r\n  }\r\n}\r\n\r\nfunction dataToCup(data) {\r\n  return data.map((cup) => ({\r\n    id: cup._id,\r\n    user_id: cup.user_id,\r\n    name: cup.name,\r\n    year: cup.year,\r\n    signees: cup.signees,\r\n    isPublic: cup.isPublic,\r\n    createdAt: new Date(cup.createdAt),\r\n  }));\r\n}\r\n\r\nexport default CupService;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"api/competitions/\";\r\n\r\nclass CompetitionService {\r\n  // Get competitions with given query from api/competitions/\r\n  static async getCompetitions(query) {\r\n    const res = await axios.get(`${url}`, { params: query });\r\n    try {\r\n      let competition = res.data;\r\n      // Array, with multiple competitions\r\n      if (typeof competition == \"object\" && competition.constructor === Array) {\r\n        competition = dataToCompetition(competition);\r\n      }\r\n      // If it's not an array, just return res.data\r\n      return competition;\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n\r\n  // Create competition\r\n  static insertCompetition(competition) {\r\n    return axios.post(url, {\r\n      user_id: competition.user_id,\r\n      cup_id: competition.cup_id,\r\n      name: competition.name,\r\n      locality: competition.locality,\r\n      cup_name: competition.cup_name,\r\n      cup_placement_points: competition.cup_placement_points,\r\n      cup_placement_points_array: competition.cup_placement_points_array,\r\n      cup_participation_points: competition.cup_participation_points,\r\n      cup_points_multiplier: competition.cup_points_multiplier,\r\n      start_date: competition.start_date,\r\n      end_date: competition.end_date,\r\n      start_time: competition.start_time,\r\n      end_time: competition.end_time,\r\n      fishes: competition.fishes,\r\n      state: competition.state,\r\n      signees: competition.signees,\r\n      teams: competition.teams,\r\n      normal_points: [],\r\n      normal_weights: [],\r\n      team_results: [],\r\n      team_competition: competition.team_competition,\r\n      biggest_fishes: competition.biggest_fishes,\r\n      biggest_amounts: competition.biggest_amounts,\r\n      isPublic: false,\r\n      isFinished: false,\r\n    });\r\n  }\r\n\r\n  // Update whole competition\r\n  static updateCompetition(id, competition) {\r\n    return axios.put(`${url}${id}`, competition);\r\n  }\r\n\r\n  // Update some values\r\n  static updateValues(id, newvalues) {\r\n    return axios.put(`${url}${id}`, newvalues);\r\n  }\r\n\r\n  static deleteCompetition(id) {\r\n    return axios.delete(`${url}${id}`);\r\n  }\r\n}\r\n\r\nfunction dataToCompetition(data) {\r\n  return data.map((competition) => ({\r\n    _id: competition._id,\r\n    user_id: competition.user_id,\r\n    cup_id: competition.cup_id,\r\n    name: competition.name,\r\n    locality: competition.locality,\r\n    cup_name: competition.cup_name,\r\n    cup_placement_points: competition.cup_placement_points,\r\n    cup_placement_points_array: competition.cup_placement_points_array,\r\n    cup_participation_points: competition.cup_participation_points,\r\n    cup_points_multiplier: competition.cup_points_multiplier,\r\n    start_date: competition.start_date,\r\n    end_date: competition.end_date,\r\n    start_time: competition.start_time,\r\n    end_time: competition.end_time,\r\n    total_weights: competition.total_weights,\r\n    fishes: competition.fishes,\r\n    state: competition.state,\r\n    createdAt: new Date(competition.createdAt),\r\n    signees: competition.signees,\r\n    teams: competition.teams,\r\n    team_competition: competition.team_competition,\r\n    normal_points: competition.normal_points,\r\n    normal_weights: competition.normal_weights,\r\n    team_results: competition.team_results,\r\n    biggest_fishes: competition.biggest_fishes,\r\n    biggest_amounts: competition.biggest_amounts,\r\n    isPublic: competition.isPublic,\r\n    isFinished: competition.isFinished,\r\n  }));\r\n}\r\n\r\nexport default CompetitionService;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"api/feedback/\";\r\n\r\nclass FeedbackService {\r\n  // Get competitions\r\n  static async getFeedback() {\r\n    const res = await axios.get(url);\r\n    try {\r\n      const data = res.data;\r\n      return data.map((feedback) => ({\r\n        _id: feedback._id,\r\n        type: feedback.type,\r\n        message: feedback.message,\r\n        createdAt: new Date(feedback.createdAt),\r\n      }));\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n\r\n  // Create feedback\r\n  static insertFeedback(feedback) {\r\n    return axios.post(url, {\r\n      type: feedback.type,\r\n      message: feedback.message,\r\n    });\r\n  }\r\n\r\n  static deleteFeedback(id) {\r\n    return axios.delete(`${url}${id}`);\r\n  }\r\n}\r\n\r\nexport default FeedbackService;\r\n"],"sourceRoot":""}