{"version":3,"sources":["webpack:///./src/i18n.js","webpack:///./src/shared.js"],"names":["inter_fin","cancel","clear","done","previousMonth","nextMonth","months","monthsShort","weekdays","weekdaysShort","weekdaysAbbrev","options","format","twelveHour","i18n","options_picker","range","dictToArray","dict","type","temp_arr","Object","entries","arr","forEach","element","values","String","toLocaleString","length","i","parseInt","temp_placement","temp_bnumber","temp_captain","temp_points","place","team","captain_1","captain_2","captain_3","points","b_number","captain","startin_place","locality","fish_name","fish_multiplier","fish_minsize","fish_weights","Math","round","Number","EPSILON","push","capitalize_words","str","replace","txt","toUpperCase","replaceAll","string","search","split","join","formatDate","start_date","this","$moment","formatted_date","date","month","year","saveAsPDF","competition_type","table_id","onbeforeprint","rows","columns","pdf_competition_type","temp_start_date","competition","temp_end_date","end_date","doc","jsPDF","title","name","time","start_time","end_time","setFontSize","text","align","cup_name","line","selected_normal","normal_points","table_fish_names","normal_weights","isTeamCompetition","$store","getters","getSignees","team_results","selected_biggest_fish","biggest_fishes_results","selected_biggest_amount","biggest_amounts_results","autoTable","head","body","styles","overflow","cellWidth","rowPageBreak","halign","fontSize","lineColor","lineWidth","columnStyles","cellwidth","theme","pageBreak","tableWidth","startY","margin","top","save","onafterprint","saveStatsAsPDF","fishesImg","document","getElementById","toDataURL","signeeImg","addImage","calculated_fish_weights","previous","finalY","cup_points_multiplier","signees","getPointSignees","saveAllAsPDF","tab","start_coord","current_tab","charts_loaded","temp_selected_biggest_fish","temp_selected_biggest_amount","temp_selected_normal","selected_print","includes","addPage","counter","calculateBiggestFishes","calculateBiggestAmounts","biggest_amounts","err","setTimeout","M","toast","html","Chart","require","id","instances","chart","canvas","parentNode","style","height","width","resize","drawCharts","start","end","getColor","placement","getColorPoints","temp_weights","colors","fish","weights","color","signee_data","point_signees","no_points_signees","fishes_chart_title","fishes_chart_data","labels","datasets","label","backgroundColor","data","signee_chart_title","signee_chart_data","checkLogin","localStorage","getItem","state","logged_in","user","JSON","parse","is_admin","sortDict","fishes","all_results","temp_results","fish_names","sort","a","b","weight","filter","result","boat_number","captain_name"],"mappings":"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","file":"js/about~970f9218.fafa9fcb.js","sourcesContent":["// Translations for Materialize pickers\r\n// Finnish\r\nconst inter_fin = {\r\n  cancel: \"Peruuta\",\r\n  clear: \"Pyyhi\",\r\n  done: \"Ok\",\r\n  previousMonth: \"‹\",\r\n  nextMonth: \"›\",\r\n  months: [\r\n    \"Tammikuu\",\r\n    \"Helmikuu\",\r\n    \"Maaliskuu\",\r\n    \"Huhtikuu\",\r\n    \"Toukokuu\",\r\n    \"Kesäkuu\",\r\n    \"Heinäkuu\",\r\n    \"Elokuu\",\r\n    \"Syyskuu\",\r\n    \"Lokakuu\",\r\n    \"Marraskuu\",\r\n    \"Joulukuu\",\r\n  ],\r\n  monthsShort: [\r\n    \"Tammi\",\r\n    \"Helmi\",\r\n    \"Maalis\",\r\n    \"Huhti\",\r\n    \"Touko\",\r\n    \"Kesä\",\r\n    \"Heinä\",\r\n    \"Elo\",\r\n    \"Syys\",\r\n    \"Loka\",\r\n    \"Marras\",\r\n    \"Joulu\",\r\n  ],\r\n  weekdays: [\r\n    \"Maanantai\",\r\n    \"Tiistai\",\r\n    \"Keskiviikko\",\r\n    \"Torstai\",\r\n    \"Perjantai\",\r\n    \"Lauantai\",\r\n    \"Sunnuntai\",\r\n  ],\r\n  weekdaysShort: [\"Ma\", \"Ti\", \"Ke\", \"To\", \"Pe\", \"La\", \"Su\"],\r\n  weekdaysAbbrev: [\"M\", \"T\", \"K\", \"T\", \"P\", \"L\", \"S\"],\r\n};\r\n\r\nconst options = {\r\n  format: \"dd.mm.yyyy\",\r\n  twelveHour: false,\r\n  i18n: inter_fin,\r\n};\r\n\r\nexport var options_picker = options;\r\n","import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport M from \"materialize-css\";\r\n// Parses dictionary/json to array, for pdf autotables\r\nfunction dictToArray(dict, type) {\r\n  const temp_arr = Object.entries(dict);\r\n  const arr = [];\r\n  temp_arr.forEach((element) => {\r\n    let values = Object.values(element[1]);\r\n    // Normaalikilpailu, pisteet\r\n    if (type === 1) {\r\n      values[0] = String(values[0]) + \".\";\r\n      values[1] = \"(\" + String(values[1]) + \")\";\r\n      values[5] = values[5].toLocaleString() + \" p\";\r\n    }\r\n    // Normaalikilpailu, kalat\r\n    if (type === 2) {\r\n      values[0] = String(values[0]) + \".\";\r\n      values[1] = \"(\" + String(values[1]) + \")\";\r\n      for (let i of range(3, values.length - 2)) {\r\n        if (parseInt(values[i]) > 0) {\r\n          values[i] = values[i].toLocaleString() + \" g\";\r\n        } else {\r\n          values[i] = \"-\";\r\n        }\r\n      }\r\n      values[values.length - 1] =\r\n        values[values.length - 1].toLocaleString() + \" p\";\r\n    }\r\n    // Suurimmat kalat, suurimmat kalasaaliit\r\n    if (type === 3) {\r\n      let temp_placement = values[3];\r\n      let temp_bnumber = values[0];\r\n      let temp_captain = values[1];\r\n      let temp_points = values[2].toLocaleString() + \" g\";\r\n      values[0] = String(temp_placement) + \".\";\r\n      values[1] = \"(\" + String(temp_bnumber) + \")\";\r\n      values[2] = temp_captain;\r\n      values[3] = temp_points;\r\n    }\r\n    //Voittajat\r\n    if (type === 4) {\r\n      values[1] = \"(\" + String(values[1]) + \")\";\r\n      values[3] = values[values.length - 1].toLocaleString() + \" g\";\r\n    }\r\n    //Tiimikilpailu\r\n    if (type === 5) {\r\n      let place = values[5];\r\n      let team = values[0];\r\n      let captain_1 = values[1];\r\n      let captain_2 = values[2];\r\n      let captain_3 = values[3];\r\n      let points = values[4];\r\n      values[0] = String(place) + \".\";\r\n      values[1] = team;\r\n      values[2] = captain_1;\r\n      values[3] = captain_2;\r\n      values[4] = captain_3;\r\n      values[5] = points.toLocaleString() + \" p\";\r\n    }\r\n    //Normaalikilpailu, Ilmoittautuneet\r\n    if (type === 6) {\r\n      let b_number = values[1];\r\n      let captain = values[3];\r\n      let temp_captain = values[4];\r\n      let startin_place = values[2];\r\n      let locality = values[5];\r\n      let team = values[6];\r\n      values[0] = \"(\" + String(b_number) + \")\";\r\n      values[1] = captain;\r\n      values[2] = temp_captain;\r\n      values[3] = startin_place;\r\n      values[4] = locality;\r\n      values[5] = team;\r\n    }\r\n    //Kalalajien info\r\n    if (type === 7) {\r\n      let fish_name = values[0];\r\n      let fish_multiplier = values[1];\r\n      let fish_minsize = values[2];\r\n      let fish_weights = values[3];\r\n      values[0] = fish_name;\r\n      values[1] = \"x \" + String(fish_multiplier);\r\n      values[2] = fish_minsize;\r\n      values[3] =\r\n        String(Math.round((fish_weights / 1000 + Number.EPSILON) * 100) / 100) +\r\n        \" kg\";\r\n    }\r\n    arr.push(values);\r\n  });\r\n  return arr;\r\n}\r\n\r\n// Capitalize all the words in given string. Takes account all the characters like \"-\", \"'\" etc.\r\nfunction capitalize_words(str) {\r\n  return str.replace(/(?:^|\\s|['`‘’.-])[^\\x60^\\x7B-\\xDF](?!(\\s|$))/g, function(\r\n    txt\r\n  ) {\r\n    return txt.toUpperCase();\r\n  });\r\n}\r\n\r\n// For naming the pdf, replace certain characters\r\nfunction replaceAll(string, search, replace) {\r\n  return string.split(search).join(replace);\r\n}\r\n\r\n// Returns date in format dd/mm/yyyy as string\r\nfunction formatDate(start_date) {\r\n  start_date = this.$moment(start_date);\r\n  let formatted_date = `${start_date.date()}.${start_date.month() +\r\n    1}.${start_date.year()}`;\r\n\r\n  return formatted_date;\r\n}\r\n// Convert the charts and the tables to pdf\r\nfunction saveAsPDF(competition_type, table_id) {\r\n  this.onbeforeprint();\r\n  // Format dates for easier reding\r\n  let temp_start_date = this.formatDate(this.competition.start_date);\r\n  let temp_end_date = this.formatDate(this.competition.end_date);\r\n  let rows;\r\n  let columns;\r\n  let pdf_competition_type;\r\n  // PDF creation\r\n  let doc = new jsPDF();\r\n  // Title\r\n  const title = `${this.competition.name}`;\r\n  const date =\r\n    temp_start_date === temp_end_date\r\n      ? String(temp_start_date)\r\n      : `${temp_start_date} - ${temp_end_date}`;\r\n  const time = `${date}, Klo. ${this.competition.start_time} - ${this.competition.end_time}`;\r\n  doc.setFontSize(24);\r\n  doc.text(10, 10, title, { align: \"left\" });\r\n  doc.setFontSize(14);\r\n  doc.text(10, 20, this.competition.cup_name, { align: \"left\" });\r\n  doc.text(10, 30, time, { align: \"left\" });\r\n  doc.line(0, 35, 400, 35);\r\n  doc.setFontSize(20);\r\n\r\n  if (table_id === \"#normal-table\") {\r\n    pdf_competition_type = `Normaalikilpailu${this.selected_normal}`;\r\n    // Other tables are generated in code so no need to wait for rendering to html\r\n    if (this.selected_normal === \"Pisteet\") {\r\n      columns = [\r\n        \"Sijoitus\",\r\n        \"Nro.\",\r\n        \"Kippari\",\r\n        \"Varakippari\",\r\n        \"Paikkakunta\",\r\n        \"Tulos\",\r\n        \"Sij. pisteet\",\r\n        \"Osal. pisteet\",\r\n        \"Yht.\",\r\n      ];\r\n      // Format dictionary/json to format that autotable understands (arrays in arrays);\r\n      rows = this.dictToArray(this.normal_points, 1);\r\n    }\r\n    if (this.selected_normal === \"Kalat\") {\r\n      columns = [\"Sijoitus\", \"Nro.\", \"Kippari\"];\r\n      // Get fish names for columns\r\n      this.table_fish_names.forEach((name) => {\r\n        columns.push(name);\r\n      });\r\n      columns.push(\"Tulos\");\r\n      // Format dictionary/json to format that autotable understands (arrays in arrays);\r\n      rows = this.dictToArray(this.normal_weights, 2);\r\n    }\r\n    if (this.selected_normal === \"Ilmoittautuneet\") {\r\n      columns = [\r\n        \"Kilp. numero\",\r\n        \"Kippari\",\r\n        \"Varakippari\",\r\n        \"Paikkakunta\",\r\n        \"Lähtöpaikka\",\r\n      ];\r\n      if (this.isTeamCompetition) {\r\n        columns.push(\"Tiimi\");\r\n      }\r\n      // Format dictionary/json to format that autotable understands (arrays in arrays);\r\n      rows = this.dictToArray(this.$store.getters.getSignees, 6);\r\n    }\r\n  }\r\n\r\n  if (table_id === \"#team-table\") {\r\n    pdf_competition_type = `Tiimikilpailu`;\r\n    // Other tables are generated in code so no need to wait for rendering to html\r\n    columns = [\"Sijoitus\", \"Tiimi\", \"Jäsen 1\", \"Jäsen 2\", \"Jäsen 3\", \"Pisteet\"];\r\n    // Format dictionary/json to format that autotable understands (arrays in arrays);\r\n    rows = this.dictToArray(this.team_results, 5);\r\n  }\r\n\r\n  if (table_id === \"#biggest-fishes-table\") {\r\n    pdf_competition_type = `SuurimmatKalat${this.selected_biggest_fish}`;\r\n\r\n    if (this.selected_biggest_fish === \"Voittajat\") {\r\n      columns = [\"Kalalaji\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n      rows = this.dictToArray(this.biggest_fishes_results, 4);\r\n    } else {\r\n      columns = [\"Sijoitus\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n      rows = this.dictToArray(this.biggest_fishes_results, 3);\r\n    }\r\n  }\r\n\r\n  if (table_id === \"#biggest-amounts-table\") {\r\n    pdf_competition_type = `SuurimmatSaaliit${this.selected_biggest_amount}`;\r\n\r\n    if (this.selected_biggest_amount === \"Voittajat\") {\r\n      columns = [\"Kalalaji\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n      rows = this.dictToArray(this.biggest_amounts_results, 4);\r\n    } else {\r\n      columns = [\"Sijoitus\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n      rows = this.dictToArray(this.biggest_amounts_results, 3);\r\n    }\r\n  }\r\n\r\n  // Table, based on given table_id, and table title based on competition_type\r\n  doc.text(100, 50, competition_type, { align: \"center\" });\r\n  doc.autoTable({\r\n    head: [columns],\r\n    body: rows,\r\n    styles: {\r\n      overflow: \"linebreak\",\r\n      cellWidth: \"wrap\",\r\n      rowPageBreak: \"avoid\",\r\n      halign: \"justify\",\r\n      fontSize: \"8\",\r\n      lineColor: \"100\",\r\n      lineWidth: \".25\",\r\n    },\r\n    columnStyles: { text: { cellwidth: \"auto\" } },\r\n    theme: \"striped\",\r\n    pageBreak: \"auto\",\r\n    tableWidth: \"auto\",\r\n    startY: 55,\r\n    margin: { top: 20 },\r\n  });\r\n  // Save the pdf\r\n  doc.save(\r\n    `${this.$moment(this.competition.start_date).year()}_${this.replaceAll(\r\n      this.competition.name,\r\n      \" \",\r\n      \"\"\r\n    )}_${pdf_competition_type}.pdf`\r\n  );\r\n  // Set charts to be responsive again\r\n  this.onafterprint();\r\n}\r\n\r\nfunction saveStatsAsPDF(competition_type) {\r\n  this.onbeforeprint();\r\n  // Format dates for easier reding\r\n  let temp_start_date = this.formatDate(this.competition.start_date);\r\n  let temp_end_date = this.formatDate(this.competition.end_date);\r\n\r\n  let doc = new jsPDF();\r\n\r\n  // Title\r\n  const title = `${this.competition.name}`;\r\n  const date =\r\n    temp_start_date === temp_end_date\r\n      ? String(temp_start_date)\r\n      : `${temp_start_date} - ${temp_end_date}`;\r\n  const time = `${date}, Klo. ${this.competition.start_time} - ${this.competition.end_time}`;\r\n  doc.setFontSize(24);\r\n  doc.text(10, 10, title, { align: \"left\" });\r\n  doc.setFontSize(14);\r\n  doc.text(10, 20, this.competition.cup_name, { align: \"left\" });\r\n  doc.text(10, 30, time, { align: \"left\" });\r\n  doc.line(0, 35, 400, 35);\r\n  doc.setFontSize(18);\r\n\r\n  // \"Tilastot\"\r\n  // Resize charts to be better looking on a pdf\r\n  var fishesImg = document\r\n    .getElementById(\"fishes_chart\")\r\n    .toDataURL(\"image/png\", 1.0);\r\n  var signeeImg = document\r\n    .getElementById(\"signee_chart\")\r\n    .toDataURL(\"image/png\", 1.0);\r\n  doc.addImage(fishesImg, \"PNG\", -30, 40, 180, 90);\r\n  doc.addImage(signeeImg, \"PNG\", 70, 40, 180, 90);\r\n  doc.text(100, 145, \"Kalalajien määritykset\", { align: \"center\" });\r\n  // Generate table\r\n  let rows = this.dictToArray(this.calculated_fish_weights, 7);\r\n  let columns = [\"Kalalaji\", \"Kerroin\", \"Alamitta\", \"Saalista saatu\"];\r\n  doc.autoTable({\r\n    head: [columns],\r\n    body: rows,\r\n    styles: {\r\n      overflow: \"linebreak\",\r\n      cellWidth: \"wrap\",\r\n      rowPageBreak: \"avoid\",\r\n      halign: \"justify\",\r\n      fontSize: \"8\",\r\n      lineColor: \"100\",\r\n      lineWidth: \".25\",\r\n    },\r\n    columnStyles: { text: { cellwidth: \"auto\" } },\r\n    theme: \"striped\",\r\n    pageBreak: \"auto\",\r\n    tableWidth: \"auto\",\r\n    startY: 150,\r\n    margin: { top: 20 },\r\n  });\r\n\r\n  doc.text(100, doc.autoTable.previous.finalY + 20, \"Yleisiä tilastoja\", {\r\n    align: \"center\",\r\n  });\r\n\r\n  columns = [\"\", \"\"];\r\n  rows = [\r\n    [\"Cup pistekerroin\", `x ${this.competition.cup_points_multiplier}`],\r\n    [\"Ilmoittautuneita yhteensä\", `${this.signees.length} kpl`],\r\n    [\r\n      \"Saalista saaneita\",\r\n      `${Math.round(\r\n        (this.$store.getters.getPointSignees.length /\r\n          this.competition.signees.length) *\r\n          100 *\r\n          100\r\n      ) / 100} % (${this.$store.getters.getPointSignees.length}/${\r\n        this.signees.length\r\n      })`,\r\n    ],\r\n  ];\r\n  doc.autoTable({\r\n    head: [columns],\r\n    body: rows,\r\n    styles: {\r\n      overflow: \"linebreak\",\r\n      cellWidth: \"wrap\",\r\n      rowPageBreak: \"avoid\",\r\n      halign: \"justify\",\r\n      fontSize: \"8\",\r\n      lineColor: \"100\",\r\n      lineWidth: \".25\",\r\n    },\r\n    columnStyles: { text: { cellwidth: \"auto\" } },\r\n    theme: \"striped\",\r\n    pageBreak: \"auto\",\r\n    tableWidth: \"auto\",\r\n    margin: { top: 20 },\r\n    startY: doc.autoTable.previous.finalY + 25,\r\n  });\r\n\r\n  // Save to pdf\r\n  doc.save(\r\n    `${this.$moment(this.competition.start_date).year()}_${this.replaceAll(\r\n      this.competition.name,\r\n      \" \",\r\n      \"\"\r\n    )}_${this.replaceAll(this.capitalize_words(competition_type), \" \", \"\")}.pdf`\r\n  );\r\n\r\n  // Set charts to be responsive again\r\n  this.onafterprint();\r\n}\r\n// Saves all the chosen tables to pdf\r\nfunction saveAllAsPDF(tab) {\r\n  this.onbeforeprint();\r\n  let current_tab = tab;\r\n  let charts_loaded = true;\r\n  let temp_selected_biggest_fish = this.selected_biggest_fish;\r\n  let temp_selected_biggest_amount = this.selected_biggest_amount;\r\n  let temp_selected_normal = this.selected_normal;\r\n  // Format dates for easier reding\r\n  let temp_start_date = this.formatDate(this.competition.start_date);\r\n  let temp_end_date = this.formatDate(this.competition.end_date);\r\n  let year = this.$moment(this.competition.start_date).year();\r\n\r\n  let doc = new jsPDF();\r\n\r\n  // Title\r\n  const title = `${this.competition.name}`;\r\n  const date =\r\n    temp_start_date === temp_end_date\r\n      ? String(temp_start_date)\r\n      : `${temp_start_date} - ${temp_end_date}`;\r\n  const time = `${date}, Klo. ${this.competition.start_time} - ${this.competition.end_time}`;\r\n  doc.setFontSize(24);\r\n  doc.text(10, 10, title, { align: \"left\" });\r\n  doc.setFontSize(14);\r\n  doc.text(10, 20, this.competition.cup_name, { align: \"left\" });\r\n  doc.text(10, 30, time, { align: \"left\" });\r\n  doc.line(0, 35, 400, 35);\r\n  doc.setFontSize(18);\r\n  // start_coord needed to keep track of y coordinates for tables (if there are no results -> no table drawn to pdf -> varying coordinates)\r\n  let start_coord;\r\n  let rows;\r\n  let columns;\r\n  //Normaalikilpailu (Pisteet), saved to pdf if it's inclued in this.selected_print array\r\n  if (this.selected_print.includes(\"normal\")) {\r\n    // Other tables are generated in code so no need to wait for rendering to html\r\n    columns = [\r\n      \"Sijoitus\",\r\n      \"Nro.\",\r\n      \"Kippari\",\r\n      \"Varakippari\",\r\n      \"Paikkakunta\",\r\n      \"Tulos\",\r\n      \"Sij. pisteet\",\r\n      \"Osal. pisteet\",\r\n      \"Yht.\",\r\n    ];\r\n    // Format dictionary/json to format that autotable understands (arrays in arrays);\r\n    rows = this.dictToArray(this.normal_points, 1);\r\n    doc.text(100, 50, \"Normaalikilpailun tulokset (Pisteet)\", {\r\n      align: \"center\",\r\n    });\r\n    // Table generated in code\r\n    doc.autoTable({\r\n      head: [columns],\r\n      body: rows,\r\n      styles: {\r\n        overflow: \"linebreak\",\r\n        cellWidth: \"wrap\",\r\n        rowPageBreak: \"avoid\",\r\n        halign: \"justify\",\r\n        fontSize: \"8\",\r\n        lineColor: \"100\",\r\n        lineWidth: \".25\",\r\n      },\r\n      columnStyles: { text: { cellwidth: \"auto\" } },\r\n      theme: \"striped\",\r\n      pageBreak: \"auto\",\r\n      tableWidth: \"auto\",\r\n      startY: 55,\r\n      margin: { top: 20 },\r\n    });\r\n\r\n    //Normaalikilpailu (Kalat)\r\n    doc.addPage();\r\n    columns = [\"Sijoitus\", \"Nro.\", \"Kippari\"];\r\n    // Get fish names for columns\r\n    this.table_fish_names.forEach((name) => {\r\n      columns.push(name);\r\n    });\r\n    columns.push(\"Tulos\");\r\n\r\n    rows = this.dictToArray(this.normal_weights, 2);\r\n    doc.text(100, 10, \"Normaalikilpailun tulokset (Kalat)\", {\r\n      align: \"center\",\r\n    });\r\n    // Table generated in code\r\n    doc.autoTable({\r\n      head: [columns],\r\n      body: rows,\r\n      styles: {\r\n        overflow: \"linebreak\",\r\n        cellWidth: \"wrap\",\r\n        rowPageBreak: \"avoid\",\r\n        halign: \"justify\",\r\n        fontSize: \"8\",\r\n        lineColor: \"100\",\r\n        lineWidth: \".25\",\r\n      },\r\n      columnStyles: { text: { cellwidth: \"auto\" } },\r\n      theme: \"striped\",\r\n      pageBreak: \"auto\",\r\n      tableWidth: \"auto\",\r\n      margin: { top: 20 },\r\n      startY: 20,\r\n    });\r\n  }\r\n\r\n  // Tiimikilpailu, drawn to pdf if it exists and , if it's inclued in this.selected_print array\r\n  if (this.isTeamCompetition && this.selected_print.includes(\"team\")) {\r\n    // If there is \"Normaalikilpailun tulokset\" selected also, start from new page\r\n    if (this.selected_print.includes(\"normal\")) {\r\n      doc.addPage();\r\n    }\r\n    doc.setFontSize(24);\r\n    doc.text(10, 10, title, { align: \"left\" });\r\n    doc.setFontSize(14);\r\n    doc.text(10, 20, this.competition.cup_name, { align: \"left\" });\r\n    doc.text(10, 30, time, { align: \"left\" });\r\n    doc.line(0, 35, 400, 35);\r\n    doc.setFontSize(18);\r\n    doc.text(100, 50, \"Tiimikilpailun tulokset\", { align: \"center\" });\r\n    // Add results, if there are any\r\n    if (this.team_results.length) {\r\n      // Other tables are generated in code so no need to wait for rendering to html\r\n      columns = [\r\n        \"Sijoitus\",\r\n        \"Tiimi\",\r\n        \"Jäsen 1\",\r\n        \"Jäsen 2\",\r\n        \"Jäsen 3\",\r\n        \"Pisteet\",\r\n      ];\r\n      // Format dictionary/json to format that autotable understands (arrays in arrays);\r\n      rows = this.dictToArray(this.normal_points, 1);\r\n      //TODO generate table in code instead of html, like the others\r\n      doc.autoTable({\r\n        head: [columns],\r\n        body: rows,\r\n        styles: {\r\n          overflow: \"linebreak\",\r\n          cellWidth: \"wrap\",\r\n          rowPageBreak: \"avoid\",\r\n          halign: \"justify\",\r\n          fontSize: \"8\",\r\n          lineColor: \"100\",\r\n          lineWidth: \".25\",\r\n        },\r\n        columnStyles: { text: { cellwidth: \"auto\" } },\r\n        theme: \"striped\",\r\n        pageBreak: \"auto\",\r\n        tableWidth: \"auto\",\r\n        margin: { top: 20 },\r\n        startY: 55,\r\n      });\r\n    }\r\n  }\r\n\r\n  //\"Suurimmat kalat\" to pdf if it's inclued in this.selected_print array\r\n  if (this.selected_print.includes(\"biggest_fishes\")) {\r\n    // If there is content before, start from new page\r\n    if (\r\n      this.selected_print.includes(\"normal\") ||\r\n      this.selected_print.includes(\"team\")\r\n    ) {\r\n      doc.addPage();\r\n    }\r\n    let counter = 0;\r\n    // For each fish, generate tables for \"Suurimmat Kalat (Kala)\" and \"Suurimmat Kalasaaliit (Kala)\"\r\n    this.table_fish_names.forEach((name) => {\r\n      // Same process as above, but for every fish instead of only winners\r\n      this.selected_biggest_fish = name;\r\n      this.calculateBiggestFishes();\r\n      start_coord = 10;\r\n\r\n      if (this.biggest_fishes_results.length) {\r\n        // So it doesn't add unnecessary page on the first loop\r\n        if (counter > 0) {\r\n          doc.addPage();\r\n        }\r\n        doc.setFontSize(24);\r\n        doc.text(10, 10, title, { align: \"left\" });\r\n        doc.setFontSize(14);\r\n        doc.text(10, 20, this.competition.cup_name, { align: \"left\" });\r\n        doc.text(10, 30, time, { align: \"left\" });\r\n        doc.line(0, 35, 400, 35);\r\n        doc.setFontSize(18);\r\n        start_coord = 50;\r\n\r\n        columns = [\"Sijoitus\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n        rows = this.dictToArray(this.biggest_fishes_results, 3);\r\n\r\n        doc.text(100, start_coord, \"Suurimmat kalat\" + ` (${name})`, {\r\n          align: \"center\",\r\n        });\r\n\r\n        doc.autoTable({\r\n          head: [columns],\r\n          body: rows,\r\n          styles: {\r\n            overflow: \"linebreak\",\r\n            cellWidth: \"wrap\",\r\n            rowPageBreak: \"avoid\",\r\n            halign: \"justify\",\r\n            fontSize: \"8\",\r\n            lineColor: \"100\",\r\n            lineWidth: \".25\",\r\n          },\r\n          columnStyles: { text: { cellwidth: \"auto\" } },\r\n          theme: \"striped\",\r\n          pageBreak: \"auto\",\r\n          tableWidth: \"auto\",\r\n          margin: { top: 20 },\r\n          startY: start_coord + 5,\r\n        });\r\n        counter++;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Suurimmat kalasaaliit to pdf if it's inclued in this.selected_print array\r\n  if (this.selected_print.includes(\"biggest_amounts\")) {\r\n    // If there is content before, start from new page\r\n    if (\r\n      this.selected_print.includes(\"normal\") ||\r\n      this.selected_print.includes(\"team\") ||\r\n      this.selected_print.includes(\"biggest_fishes\")\r\n    ) {\r\n      doc.addPage();\r\n    }\r\n    let counter = 0;\r\n    columns = [\"Sijoitus\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n    this.table_fish_names.forEach((name) => {\r\n      this.selected_biggest_amount = name;\r\n      this.calculateBiggestAmounts();\r\n      start_coord = 10;\r\n\r\n      if (this.biggest_amounts[name].length) {\r\n        // So it doesn't add unnecessary page on the first loop\r\n        if (counter > 0) {\r\n          doc.addPage();\r\n        }\r\n        doc.setFontSize(24);\r\n        doc.text(10, 10, title, { align: \"left\" });\r\n        doc.setFontSize(14);\r\n        doc.text(10, 20, this.competition.cup_name, { align: \"left\" });\r\n        doc.text(10, 30, time, { align: \"left\" });\r\n        doc.line(0, 35, 400, 35);\r\n        doc.setFontSize(18);\r\n        start_coord = 50;\r\n        columns = [\"Sijoitus\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n        rows = this.dictToArray(this.biggest_amounts[name], 3);\r\n        doc.text(100, start_coord, \"Suurimmat kalasaaliit\" + ` (${name})`, {\r\n          align: \"center\",\r\n        });\r\n\r\n        doc.autoTable({\r\n          head: [columns],\r\n          body: rows,\r\n          styles: {\r\n            overflow: \"linebreak\",\r\n            cellWidth: \"wrap\",\r\n            rowPageBreak: \"avoid\",\r\n            halign: \"justify\",\r\n            fontSize: \"8\",\r\n            lineColor: \"100\",\r\n            lineWidth: \".25\",\r\n          },\r\n          columnStyles: { text: { cellwidth: \"auto\" } },\r\n          theme: \"striped\",\r\n          pageBreak: \"auto\",\r\n          tableWidth: \"auto\",\r\n          startY: start_coord + 5,\r\n        });\r\n        counter++;\r\n      }\r\n    });\r\n  }\r\n\r\n  // \"Suurimmat Kalat (Voittajat) / Suurimmat kalasaaliit (Voittajat)\"\" to pdf if it's inclued in this.selected_print array\r\n  if (this.selected_print.includes(\"biggest_winners\")) {\r\n    // If there is content before, start from new page\r\n    if (\r\n      this.selected_print.includes(\"normal\") ||\r\n      this.selected_print.includes(\"team\") ||\r\n      this.selected_print.includes(\"biggest_fishes\") ||\r\n      this.selected_print.includes(\"biggest_amounts\")\r\n    ) {\r\n      doc.addPage();\r\n    }\r\n    // Suurimmat Kalat  (Voittajat)\r\n    // Select these for calculations\r\n    this.selected_biggest_fish = this.selected_biggest_amount = \"Voittajat\";\r\n    columns = [\"Kalalaji\", \"Veneen nro\", \"Kippari\", \"Paino\"];\r\n    // Calculate data\r\n    this.calculateBiggestFishes();\r\n    this.calculateBiggestAmounts();\r\n    // If there are any results, add title\r\n    if (\r\n      this.biggest_fishes_results.length ||\r\n      this.biggest_amounts_results.length\r\n    ) {\r\n      doc.setFontSize(24);\r\n      doc.text(10, 10, title, { align: \"left\" });\r\n      doc.setFontSize(14);\r\n      doc.text(10, 20, this.competition.cup_name, { align: \"left\" });\r\n      doc.text(10, 30, time, { align: \"left\" });\r\n      doc.line(0, 35, 400, 35);\r\n      doc.setFontSize(18);\r\n    }\r\n\r\n    // If there are biggest fishes\r\n    if (this.biggest_fishes_results.length) {\r\n      rows = this.dictToArray(this.biggest_fishes_results, 4);\r\n      doc.text(\r\n        100,\r\n        50,\r\n        \"Suurimmat kalat\" + ` (${this.selected_biggest_fish})`,\r\n        { align: \"center\" }\r\n      );\r\n      // Table generated in code\r\n      doc.autoTable({\r\n        head: [columns],\r\n        body: rows,\r\n        styles: {\r\n          overflow: \"linebreak\",\r\n          cellWidth: \"wrap\",\r\n          rowPageBreak: \"avoid\",\r\n          halign: \"justify\",\r\n          fontSize: \"8\",\r\n          lineColor: \"100\",\r\n          lineWidth: \".25\",\r\n        },\r\n        columnStyles: { text: { cellwidth: \"auto\" } },\r\n        theme: \"striped\",\r\n        pageBreak: \"auto\",\r\n        tableWidth: \"auto\",\r\n        margin: { top: 20 },\r\n        startY: 55,\r\n      });\r\n      // Keep track of y coordinate\r\n      start_coord = doc.autoTable.previous.finalY + 25;\r\n    } else {\r\n      // If no biggest fishes, biggest amounts table starts from 50 instead\r\n      start_coord = 50;\r\n    }\r\n\r\n    //Suurimmat kalasaaliit (Voittajat)\r\n    // If there are any amounts --> if someone has gotten any fish\r\n    if (this.biggest_amounts_results.length) {\r\n      rows = this.dictToArray(this.biggest_amounts_results, 4);\r\n      doc.text(\r\n        100,\r\n        start_coord,\r\n        \"Suurimmat kalasaaliit\" + ` (${this.selected_biggest_fish})`,\r\n        { align: \"center\" }\r\n      );\r\n      // Table generated in code\r\n      doc.autoTable({\r\n        head: [columns],\r\n        body: rows,\r\n        styles: {\r\n          overflow: \"linebreak\",\r\n          cellWidth: \"wrap\",\r\n          rowPageBreak: \"avoid\",\r\n          halign: \"justify\",\r\n          fontSize: \"8\",\r\n          lineColor: \"100\",\r\n          lineWidth: \".25\",\r\n        },\r\n        columnStyles: { text: { cellwidth: \"auto\" } },\r\n        theme: \"striped\",\r\n        pageBreak: \"auto\",\r\n        tableWidth: \"auto\",\r\n        margin: { top: 20 },\r\n        startY: start_coord + 5,\r\n      });\r\n    }\r\n  }\r\n  // \"Tilastoja\" to pdf if it's inclued in this.selected_print array\r\n  if (this.selected_print.includes(\"stats\")) {\r\n    // If there is content before, start from new page\r\n    if (\r\n      this.selected_print.includes(\"normal\") ||\r\n      this.selected_print.includes(\"team\") ||\r\n      this.selected_print.includes(\"biggest_fishes\") ||\r\n      this.selected_print.includes(\"biggest_amounts\") ||\r\n      this.selected_print.includes(\"biggest_winners\")\r\n    ) {\r\n      doc.addPage();\r\n    }\r\n    doc.setFontSize(24);\r\n    doc.text(10, 10, title, { align: \"left\" });\r\n    doc.setFontSize(14);\r\n    doc.text(10, 20, this.competition.cup_name, { align: \"left\" });\r\n    doc.text(10, 30, time, { align: \"left\" });\r\n    doc.line(0, 35, 400, 35);\r\n    doc.setFontSize(18);\r\n    // \"Tilastot\"\r\n    // Resize charts to be better looking on a pdf\r\n    var fishesImg = document\r\n      .getElementById(\"fishes_chart\")\r\n      .toDataURL(\"image/png\", 1.0);\r\n    var signeeImg = document\r\n      .getElementById(\"signee_chart\")\r\n      .toDataURL(\"image/png\", 1.0);\r\n    try {\r\n      doc.addImage(fishesImg, \"PNG\", -30, 40, 180, 90);\r\n      doc.addImage(signeeImg, \"PNG\", 70, 40, 180, 90);\r\n    } catch (err) {\r\n      charts_loaded = false;\r\n      this.tab = \"stats\";\r\n      // Try again after 1 sec\r\n      setTimeout(() => this.saveAllAsPDF(current_tab), 1000);\r\n    }\r\n    doc.text(100, 165, \"Kalalajien määritykset\", { align: \"center\" });\r\n    // Table generated straight from html\r\n    rows = this.dictToArray(this.calculated_fish_weights, 7);\r\n    columns = [\"Kalalaji\", \"Kerroin\", \"Alamitta\", \"Saalista saatu\"];\r\n\r\n    doc.autoTable({\r\n      head: [columns],\r\n      body: rows,\r\n      styles: {\r\n        overflow: \"linebreak\",\r\n        cellWidth: \"wrap\",\r\n        rowPageBreak: \"avoid\",\r\n        halign: \"justify\",\r\n        fontSize: \"8\",\r\n        lineColor: \"100\",\r\n        lineWidth: \".25\",\r\n      },\r\n      columnStyles: { text: { cellwidth: \"auto\" } },\r\n      theme: \"striped\",\r\n      pageBreak: \"auto\",\r\n      tableWidth: \"auto\",\r\n      startY: 170,\r\n      margin: { top: 20 },\r\n    });\r\n\r\n    doc.text(100, doc.autoTable.previous.finalY + 20, \"Yleisiä tilastoja\", {\r\n      align: \"center\",\r\n    });\r\n    // Generate table\r\n    columns = [\"\", \"\"];\r\n    rows = [\r\n      [\"Cup pistekerroin\", `x ${this.competition.cup_points_multiplier}`],\r\n      [\"Ilmoittautuneita yhteensä\", `${this.signees.length} kpl`],\r\n      [\r\n        \"Saalista saaneita\",\r\n        `${Math.round(\r\n          (this.$store.getters.getPointSignees.length /\r\n            this.competition.signees.length) *\r\n            100 *\r\n            100\r\n        ) / 100} % (${this.$store.getters.getPointSignees.length}/${\r\n          this.signees.length\r\n        })`,\r\n      ],\r\n    ];\r\n    doc.autoTable({\r\n      head: [columns],\r\n      body: rows,\r\n      styles: {\r\n        overflow: \"linebreak\",\r\n        cellWidth: \"wrap\",\r\n        rowPageBreak: \"avoid\",\r\n        halign: \"justify\",\r\n        fontSize: \"8\",\r\n        lineColor: \"100\",\r\n        lineWidth: \".25\",\r\n      },\r\n      columnStyles: { text: { cellwidth: \"auto\" } },\r\n      theme: \"striped\",\r\n      pageBreak: \"auto\",\r\n      tableWidth: \"auto\",\r\n      margin: { top: 20 },\r\n      startY: doc.autoTable.previous.finalY + 25,\r\n    });\r\n  }\r\n\r\n  // Reset variables\r\n  this.selected_biggest_fish = temp_selected_biggest_fish;\r\n  this.selected_biggest_amount = temp_selected_biggest_amount;\r\n  this.selected_normal = temp_selected_normal;\r\n  this.calculateBiggestFishes();\r\n  this.calculateBiggestAmounts();\r\n\r\n  // Save to pdf\r\n  if (charts_loaded) {\r\n    this.tab = current_tab;\r\n    doc.save(\r\n      `${year}_${this.replaceAll(this.competition.name, \" \", \"\")}Tulokset.pdf`\r\n    );\r\n    // Set charts to be responsive again\r\n    this.onafterprint();\r\n  } else {\r\n    M.toast({ html: \"Kaaviot ei ruudulla, yritetään uudelleen...\" });\r\n  }\r\n}\r\n\r\n//Fix chartjs printing:\r\nfunction onbeforeprint() {\r\n  const Chart = require(\"chart.js\");\r\n  for (var id in Chart.instances) {\r\n    let chart = Chart.instances[id];\r\n    // Resize charts to fit pdf nicely\r\n    chart.canvas.parentNode.style.height = \"800px\";\r\n    chart.canvas.parentNode.style.width = \"1600px\";\r\n    chart.resize();\r\n  }\r\n}\r\n\r\nfunction onafterprint() {\r\n  const Chart = require(\"chart.js\");\r\n  for (var id in Chart.instances) {\r\n    let chart = Chart.instances[id];\r\n    // Resize charts back to original width\r\n    chart.canvas.parentNode.style.height = \"\";\r\n    chart.canvas.parentNode.style.width = \"\";\r\n    chart.resize();\r\n  }\r\n  this.drawCharts();\r\n}\r\n\r\n// Custom range function for for loop, with recursion which is more efficient\r\nfunction* range(start, end) {\r\n  yield start;\r\n  if (start === end) return;\r\n  yield* range(start + 1, end);\r\n}\r\n\r\nfunction getColor(placement) {\r\n  if (placement > 30) return \"red\";\r\n  if (placement > 20) return \"orange\";\r\n  else if (placement > 5) return \"yellow\";\r\n  else return \"green\";\r\n}\r\nfunction getColorPoints(points) {\r\n  if (points > 5) return \"primary darken-2\";\r\n  else return \"red\";\r\n}\r\n\r\n// Parse data, define charts, draw them\r\nfunction drawCharts() {\r\n  let temp_weights = [];\r\n  let colors = [];\r\n\r\n  // Get fish weights, and color from array for fishesChart\r\n  this.calculated_fish_weights.forEach((fish) => {\r\n    temp_weights.push(fish.weights);\r\n    colors.push(fish.color);\r\n  });\r\n\r\n  // Get data for signeesChart (total signees, and signees who have more than 0 points)\r\n  let signee_data = [];\r\n  let point_signees = this.$store.getters.getPointSignees.length;\r\n  let no_points_signees = this.signees.length - point_signees;\r\n  signee_data.push(point_signees);\r\n  signee_data.push(no_points_signees);\r\n  this.fishes_chart_title = \"Kaloja saatu yhteensä\";\r\n  this.fishes_chart_data = {\r\n    labels: this.table_fish_names, // Fish names\r\n    datasets: [\r\n      {\r\n        label: \"Paino\",\r\n        backgroundColor: colors, // Colors\r\n        data: temp_weights, // Weights\r\n      },\r\n    ],\r\n  };\r\n\r\n  this.signee_chart_title = \"Saalista saaneita\";\r\n  this.signee_chart_data = {\r\n    labels: [\"Kyllä\", \"Ei saalista\"],\r\n    datasets: [\r\n      {\r\n        label: \"Lukumäärä\",\r\n        backgroundColor: [\"#7fbf7f\", \"#ff7f7f\"], // Green and red\r\n        data: signee_data, // Data\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\n//Check if user is logged in has admin status, update values to vuex (Header.vue updates based on these values)\r\nfunction checkLogin() {\r\n  // If login token present --> user is logged in\r\n  if (localStorage.getItem(\"jwt\") != null) {\r\n    this.$store.state.logged_in = true;\r\n    let user = JSON.parse(localStorage.getItem(\"user\"));\r\n    // Check if user is admin\r\n    //TODO safer way to check this than use localstorage?\r\n    user.is_admin == true\r\n      ? (this.$store.state.is_admin = true)\r\n      : (this.$store.state.is_admin = false);\r\n  } else {\r\n    //Not logger in, so not admin either\r\n    this.$store.state.logged_in = false;\r\n    this.$store.state.is_admin = false;\r\n  }\r\n}\r\n\r\n// Sorts the dictionary based on weights\r\nfunction sortDict(fishes) {\r\n  if (fishes) {\r\n    let all_results = [];\r\n    let temp_results = [];\r\n    this.fish_names.forEach((name) => {\r\n      // If fish name is not \"Voittajat\"\r\n      if (name !== \"Voittajat\") {\r\n        // For every fish name, sort the array\r\n        if (fishes[name]) {\r\n          temp_results = fishes[name].sort(function compare(a, b) {\r\n            return parseInt(b.weight) - parseInt(a.weight);\r\n          });\r\n          fishes[name] = temp_results.filter((result) => result.weight > 0);\r\n          // Now it's sorted so first element is fine for \"voittajat\" table\r\n          if (fishes[name].length) {\r\n            all_results.push({\r\n              name: name,\r\n              boat_number: temp_results[0].boat_number,\r\n              captain_name: temp_results[0].captain_name,\r\n              weight: temp_results[0].weight.toLocaleString(),\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fishes, all_results;\r\n  } else {\r\n    return {}, [];\r\n  }\r\n}\r\n\r\nexport default {\r\n  onafterprint: onafterprint,\r\n  onbeforeprint: onbeforeprint,\r\n  saveAllAsPDF: saveAllAsPDF,\r\n  saveStatsAsPDF: saveStatsAsPDF,\r\n  saveAsPDF: saveAsPDF,\r\n  dictToArray: dictToArray,\r\n  capitalize_words: capitalize_words,\r\n  replaceAll: replaceAll,\r\n  formatDate: formatDate,\r\n  range: range,\r\n  getColorPoints: getColorPoints,\r\n  getColor: getColor,\r\n  drawCharts: drawCharts,\r\n  checkLogin: checkLogin,\r\n  sortDict: sortDict,\r\n};\r\n"],"sourceRoot":""}